
Executing:     anoremenu PopUp.Go\ to\ definition      <Cmd>lua vim.lsp.buf.definition()<CR>
Executing:     amenu     PopUp.Open\ in\ web\ browser  gx
Executing:     anoremenu PopUp.Inspect                 <Cmd>Inspect<CR>
Executing:     anoremenu PopUp.-1-                     <Nop>
Executing:     vnoremenu PopUp.Cut                     "+x
Executing:     vnoremenu PopUp.Copy                    "+y
Executing:     anoremenu PopUp.Paste                   "+gP
Executing:     vnoremenu PopUp.Paste                   "+P
Executing:     vnoremenu PopUp.Delete                  "_x
Executing:     nnoremenu PopUp.Select\ All             ggVG
Executing:     vnoremenu PopUp.Select\ All             gg0oG$
Executing:     inoremenu PopUp.Select\ All             <C-Home><C-O>VG
Executing:     anoremenu PopUp.-2-                     <Nop>
Executing:     anoremenu PopUp.How-to\ disable\ mouse  <Cmd>help disable-mouse<CR>
Executing:   
Searching for "ftplugin.vim" in runtime path
Searching for "/home/rachartier/.config/nvim/ftplugin.vim"
Searching for "/home/rachartier/.local/share/nvim/site/ftplugin.vim"
Searching for "/tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/ftplugin.vim"
sourcing "/tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/ftplugin.vim"
line 1: " Vim support file to switch on loading plugins for file types
line 2: "
line 3: " Maintainer:^IThe Vim Project <https://github.com/vim/vim>
line 4: " Last change:^I2023 Aug 10
line 5: " Former Maintainer:^IBram Moolenaar <Bram@vim.org>
line 6: 
line 7: if exists("did_load_ftplugin")
line 8:   finish
line 9: endif
line 10: let did_load_ftplugin = 1
line 11: 
line 12: augroup filetypeplugin
line 13:   au FileType * call s:LoadFTPlugin()
line 14: 
line 15:   func! s:LoadFTPlugin()
line 39: augroup END
finished sourcing /tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/ftplugin.vim
Searching for "/tmp/.mount_nvimAfSSiL/usr/lib/nvim/ftplugin.vim"
Searching for "/home/rachartier/.config/nvim/after/ftplugin.vim"
Searching for "indent.vim" in runtime path
Searching for "/home/rachartier/.config/nvim/indent.vim"
Searching for "/home/rachartier/.local/share/nvim/site/indent.vim"
Searching for "/tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/indent.vim"
sourcing "/tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/indent.vim"
line 1: " Vim support file to switch on loading indent files for file types
line 2: "
line 3: " Maintainer:^IThe Vim Project <https://github.com/vim/vim>
line 4: " Last Change:^I2023 Aug 10
line 5: " Former Maintainer:^IBram Moolenaar <Bram@vim.org>
line 6: 
line 7: if exists("did_indent_on")
line 8:   finish
line 9: endif
line 10: let did_indent_on = 1
line 11: 
line 12: augroup filetypeindent
line 13:   au FileType * call s:LoadIndent()
line 14:   func! s:LoadIndent()
line 33: augroup END
finished sourcing /tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/indent.vim
Searching for "/tmp/.mount_nvimAfSSiL/usr/lib/nvim/indent.vim"
Searching for "/home/rachartier/.config/nvim/after/indent.vim"
could not source "/etc/xdg/nvim/sysinit.vim"
could not source "$VIM/sysinit.vim"
sourcing "/home/rachartier/.config/nvim/init.lua"
Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup filetypedetect
Executing: augroup END
Executing: source /tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/filetype.lua
line 0: sourcing "/tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/filetype.lua"
Executing:   augroup filetypedetect
Executing:   runtime! ftdetect/*.{vim,lua}
Searching for "ftdetect/*.{vim,lua}" in runtime path
Searching for "/home/rachartier/.config/nvim/ftdetect/*.{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/site/ftdetect/*.{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/lazy.nvim/ftdetect/*.{vim,lua}"
Searching for "/tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/ftdetect/*.{vim,lua}"
Searching for "/tmp/.mount_nvimAfSSiL/usr/lib/nvim/ftdetect/*.{vim,lua}"
Searching for "/home/rachartier/.config/nvim/after/ftdetect/*.{vim,lua}"
Searching for "/home/rachartier/.local/state/nvim/lazy/readme/ftdetect/*.{vim,lua}"
not found in runtime path: "ftdetect/*.{vim,lua}"
Executing:   augroup END
finished sourcing /tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/filetype.lua
continuing in nvim_exec2() called at /home/rachartier/.config/nvim/init.lua:0
Executing: augroup filetypedetect
Executing: augroup END
Executing ColorSchemePre Autocommands for "*"
autocommand <Lua 68: ~/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/loader.lua:31>

Executing: 
Searching for "colors/catppuccin.*" in runtime path
Searching for "/home/rachartier/.config/nvim/colors/catppuccin.*"
Searching for "/home/rachartier/.local/share/nvim/site/colors/catppuccin.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/lazy.nvim/colors/catppuccin.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/colors/catppuccin.*"
line 0: sourcing "/home/rachartier/.local/share/nvim/lazy/nvim/colors/catppuccin.vim"
line 1: lua require("catppuccin").load()
finished sourcing /home/rachartier/.local/share/nvim/lazy/nvim/colors/catppuccin.vim
continuing in /home/rachartier/.config/nvim/init.lua
Executing: echo " "
                    
Executing ColorSchemePre Autocommands for "*"
autocommand <Lua 68: ~/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/loader.lua:31>

Executing: 
Searching for "colors/catppuccin.*" in runtime path
Searching for "/home/rachartier/.config/nvim/colors/catppuccin.*"
Searching for "/home/rachartier/.local/share/nvim/site/colors/catppuccin.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/lazy.nvim/colors/catppuccin.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/colors/catppuccin.*"
line 0: sourcing "/home/rachartier/.local/share/nvim/lazy/nvim/colors/catppuccin.vim"
line 1: lua require("catppuccin").load()
Executing: hi clear
finished sourcing /home/rachartier/.local/share/nvim/lazy/nvim/colors/catppuccin.vim
continuing in /home/rachartier/.config/nvim/init.lua
Executing: echo " "
 
Executing: source /home/rachartier/.local/share/nvim/lazy/vim-cool/plugin/cool.vim
line 0: sourcing "/home/rachartier/.local/share/nvim/lazy/vim-cool/plugin/cool.vim"
line 1: " vim-cool - Disable hlsearch when you are done searching.
line 2: " Maintainer:^Iromainl <romainlafourcade@gmail.com>
line 3: " Version:^I0.0.2
line 4: " License:^IMIT License
line 5: " Location:^Iplugin/cool.vim
line 6: " Website:^Ihttps://github.com/romainl/vim-cool
line 7: 
line 8: if exists("g:loaded_cool") || v:version < 704 || &compatible
line 9:     finish
line 10: endif
line 11: let g:loaded_cool = 1
line 12: 
line 13: let s:save_cpo = &cpo
line 14: set cpo&vim
line 15: 
line 16: augroup Cool
line 17:     autocmd!
line 18: augroup END
line 19: 
line 20: if exists('##OptionSet')
line 21:     if !exists('*execute')
line 22:         autocmd Cool OptionSet highlight let <SID>saveh = &highlight
line 23:     endif
line 24:     " toggle coolness when hlsearch is toggled
line 25:     autocmd Cool OptionSet hlsearch call <SID>PlayItCool(v:option_old, v:option_new)
line 26: endif
line 27: 
line 28: function! s:StartHL()
line 76: 
line 77: function! s:StopHL()
line 85: 
line 86: if !exists('*execute')
line 87:     let s:saveh = &highlight
line 88:     " toggle highlighting, a workaround for :nohlsearch in autocmds
line 89:     function! s:AuNohlsearch()
line 95: endif
line 96: 
line 97: function! s:PlayItCool(old, new)
line 132: 
line 133: " play it cool
line 134: call <SID>PlayItCool(0, &hlsearch)
calling <SNR>20_PlayItCool(0, 1)

line 1:     if a:old == 0 && a:new == 1
line 2:         " nohls --> hls
line 3:         "   set up coolness
line 4:         noremap <silent> <Plug>(StopHL) :<C-U>nohlsearch<cr>
line 5:         if !exists('*execute')
line 6:             noremap! <expr> <Plug>(StopHL) <SID>AuNohlsearch()
line 7: 
line 8:             " If no "execute()", ":tnoremap" isn't probably implemented too.
line 9:         else
line 10:             noremap! <expr> <Plug>(StopHL) execute('nohlsearch')[-1]
line 11:             if exists(':tnoremap')
line 12:                 tnoremap <expr> <Plug>(StopHL) execute('nohlsearch')[-1]
line 13:             endif
line 14:         endif
line 15: 
line 16:         autocmd Cool CursorMoved * call <SID>StartHL()
line 17:         autocmd Cool InsertEnter * call <SID>StopHL()
line 18:     elseif a:old == 1 && a:new == 0
line 19:         " hls --> nohls
line 20:         "   tear down coolness
line 21:         nunmap <Plug>(StopHL)
line 22:         unmap! <expr> <Plug>(StopHL)
line 23:         if exists(':tunmap')
line 24:             tunmap <Plug>(StopHL)
line 25:         endif
line 26: 
line 27:         autocmd! Cool CursorMoved
line 28:         autocmd! Cool InsertEnter
line 29:     else
line 30:         " nohls --> nohls
line 31:         "   do nothing
line 32:         return
line 33:     endif
<SNR>20_PlayItCool returning #0

continuing in /home/rachartier/.local/share/nvim/lazy/vim-cool/plugin/cool.vim

line 135: 
line 136: let &cpo = s:save_cpo
finished sourcing /home/rachartier/.local/share/nvim/lazy/vim-cool/plugin/cool.vim
continuing in nvim_exec2() called at /home/rachartier/.config/nvim/init.lua:0
Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup filetypedetect
Executing: augroup END
Executing: source /home/rachartier/.local/share/nvim/lazy/LuaSnip/plugin/luasnip.lua
line 0: sourcing "/home/rachartier/.local/share/nvim/lazy/LuaSnip/plugin/luasnip.lua"
finished sourcing /home/rachartier/.local/share/nvim/lazy/LuaSnip/plugin/luasnip.lua
continuing in nvim_exec2() called at /home/rachartier/.config/nvim/init.lua:0
Executing: source /home/rachartier/.local/share/nvim/lazy/LuaSnip/plugin/luasnip.vim
line 0: sourcing "/home/rachartier/.local/share/nvim/lazy/LuaSnip/plugin/luasnip.vim"
line 1: function! luasnip#expandable()
line 4: 
line 5: function! luasnip#expand_or_jumpable()
line 8: 
line 9: function! luasnip#expand_or_locally_jumpable()
line 12: 
line 13: function! luasnip#locally_jumpable(direction)
line 16: 
line 17: function! luasnip#jumpable(direction)
line 20: 
line 21: function! luasnip#choice_active()
finished sourcing /home/rachartier/.local/share/nvim/lazy/LuaSnip/plugin/luasnip.vim
continuing in nvim_exec2() called at /home/rachartier/.config/nvim/init.lua:0
Executing: augroup filetypedetect
Executing: augroup END
Searching for "package.json" in runtime path
Searching for "/home/rachartier/.config/nvim/package.json"
Searching for "/home/rachartier/.local/share/nvim/site/package.json"
Searching for "/home/rachartier/.local/share/nvim/lazy/lazy.nvim/package.json"
Searching for "/home/rachartier/.local/share/nvim/lazy/LuaSnip/package.json"
Searching for "/home/rachartier/.local/share/nvim/lazy/friendly-snippets/package.json"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.cmp/package.json"
Searching for "/home/rachartier/.local/share/nvim/lazy/alpha-nvim/package.json"
Searching for "/home/rachartier/.local/share/nvim/lazy/vim-cool/package.json"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/package.json"
Searching for "/tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/package.json"
Searching for "/tmp/.mount_nvimAfSSiL/usr/lib/nvim/package.json"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/after/package.json"
Searching for "/home/rachartier/.config/nvim/after/package.json"
Searching for "/home/rachartier/.local/state/nvim/lazy/readme/package.json"
Searching for "package.jsonc" in runtime path
Searching for "/home/rachartier/.config/nvim/package.jsonc"
Searching for "/home/rachartier/.local/share/nvim/site/package.jsonc"
Searching for "/home/rachartier/.local/share/nvim/lazy/lazy.nvim/package.jsonc"
Searching for "/home/rachartier/.local/share/nvim/lazy/LuaSnip/package.jsonc"
Searching for "/home/rachartier/.local/share/nvim/lazy/friendly-snippets/package.jsonc"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.cmp/package.jsonc"
Searching for "/home/rachartier/.local/share/nvim/lazy/alpha-nvim/package.jsonc"
Searching for "/home/rachartier/.local/share/nvim/lazy/vim-cool/package.jsonc"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/package.jsonc"
Searching for "/tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/package.jsonc"
Searching for "/tmp/.mount_nvimAfSSiL/usr/lib/nvim/package.jsonc"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/after/package.jsonc"
Searching for "/home/rachartier/.config/nvim/after/package.jsonc"
Searching for "/home/rachartier/.local/state/nvim/lazy/readme/package.jsonc"
not found in runtime path: "package.jsonc"
Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup filetypedetect
Executing: augroup END
Executing: source /tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/plugin/editorconfig.lua
line 0: sourcing "/tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/plugin/editorconfig.lua"
finished sourcing /tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/plugin/editorconfig.lua
continuing in nvim_exec2() called at /home/rachartier/.config/nvim/init.lua:0
Executing: source /tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/plugin/osc52.lua
line 0: sourcing "/tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/plugin/osc52.lua"
finished sourcing /tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/plugin/osc52.lua
continuing in nvim_exec2() called at /home/rachartier/.config/nvim/init.lua:0
Executing: source /home/rachartier/.local/share/nvim/lazy/cmp-emoji/after/plugin/cmp_emoji.lua
line 0: sourcing "/home/rachartier/.local/share/nvim/lazy/cmp-emoji/after/plugin/cmp_emoji.lua"
finished sourcing /home/rachartier/.local/share/nvim/lazy/cmp-emoji/after/plugin/cmp_emoji.lua
continuing in nvim_exec2() called at /home/rachartier/.config/nvim/init.lua:0
Executing: source /home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/after/plugin/cmp_nerdfont.lua
line 0: sourcing "/home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/after/plugin/cmp_nerdfont.lua"
finished sourcing /home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/after/plugin/cmp_nerdfont.lua
continuing in nvim_exec2() called at /home/rachartier/.config/nvim/init.lua:0
Executing User Autocommands for "LazyDone"
autocommand <Lua 67: ~/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/util.lua:183>

Executing: 
Searching for "spell/fr.*" in runtime path
Searching for "/home/rachartier/.config/nvim/spell/fr.*"
Searching for "/home/rachartier/.local/share/nvim/site/spell/fr.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/lazy.nvim/spell/fr.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-dap-python/spell/fr.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-emoji/spell/fr.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/spell/fr.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-git/spell/fr.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.compat/spell/fr.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/LuaSnip/spell/fr.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/friendly-snippets/spell/fr.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.cmp/spell/fr.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/alpha-nvim/spell/fr.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/vim-cool/spell/fr.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/spell/fr.*"
Searching for "/tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/spell/fr.*"
Searching for "/tmp/.mount_nvimAfSSiL/usr/lib/nvim/spell/fr.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-emoji/after/spell/fr.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/after/spell/fr.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/after/spell/fr.*"
Searching for "/home/rachartier/.config/nvim/after/spell/fr.*"
Searching for "/home/rachartier/.local/state/nvim/lazy/readme/spell/fr.*"
Executing: filetype plugin on
Searching for "filetype.lua filetype.vim" in runtime path
Searching for "/home/rachartier/.config/nvim/filetype.lua"
Searching for "/home/rachartier/.config/nvim/filetype.vim"
Searching for "/home/rachartier/.local/share/nvim/site/filetype.lua"
Searching for "/home/rachartier/.local/share/nvim/site/filetype.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/lazy.nvim/filetype.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/lazy.nvim/filetype.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-dap-python/filetype.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-dap-python/filetype.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-emoji/filetype.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-emoji/filetype.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/filetype.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/filetype.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-git/filetype.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-git/filetype.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.compat/filetype.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.compat/filetype.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/LuaSnip/filetype.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/LuaSnip/filetype.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/friendly-snippets/filetype.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/friendly-snippets/filetype.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.cmp/filetype.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.cmp/filetype.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/alpha-nvim/filetype.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/alpha-nvim/filetype.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/vim-cool/filetype.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/vim-cool/filetype.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/filetype.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/filetype.vim"
Searching for "/tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/filetype.lua"
line 0: sourcing "/tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/filetype.lua"
finished sourcing /tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/filetype.lua
continuing in /home/rachartier/.config/nvim/init.lua
Searching for "/tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/filetype.vim"
Searching for "/tmp/.mount_nvimAfSSiL/usr/lib/nvim/filetype.lua"
Searching for "/tmp/.mount_nvimAfSSiL/usr/lib/nvim/filetype.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-emoji/after/filetype.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-emoji/after/filetype.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/after/filetype.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/after/filetype.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/after/filetype.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/after/filetype.vim"
Searching for "/home/rachartier/.config/nvim/after/filetype.lua"
Searching for "/home/rachartier/.config/nvim/after/filetype.vim"
Searching for "/home/rachartier/.local/state/nvim/lazy/readme/filetype.lua"
Searching for "/home/rachartier/.local/state/nvim/lazy/readme/filetype.vim"
Searching for "ftplugin.vim" in runtime path
Searching for "/home/rachartier/.config/nvim/ftplugin.vim"
Searching for "/home/rachartier/.local/share/nvim/site/ftplugin.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/lazy.nvim/ftplugin.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-dap-python/ftplugin.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-emoji/ftplugin.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/ftplugin.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-git/ftplugin.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.compat/ftplugin.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/LuaSnip/ftplugin.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/friendly-snippets/ftplugin.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.cmp/ftplugin.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/alpha-nvim/ftplugin.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/vim-cool/ftplugin.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/ftplugin.vim"
Searching for "/tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/ftplugin.vim"
line 0: sourcing "/tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/ftplugin.vim"
line 1: " Vim support file to switch on loading plugins for file types
line 2: "
line 3: " Maintainer:^IThe Vim Project <https://github.com/vim/vim>
line 4: " Last change:^I2023 Aug 10
line 5: " Former Maintainer:^IBram Moolenaar <Bram@vim.org>
line 6: 
line 7: if exists("did_load_ftplugin")
line 8:   finish
finished sourcing /tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/ftplugin.vim
continuing in /home/rachartier/.config/nvim/init.lua
Searching for "/tmp/.mount_nvimAfSSiL/usr/lib/nvim/ftplugin.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-emoji/after/ftplugin.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/after/ftplugin.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/after/ftplugin.vim"
Searching for "/home/rachartier/.config/nvim/after/ftplugin.vim"
Searching for "/home/rachartier/.local/state/nvim/lazy/readme/ftplugin.vim"
finished sourcing /home/rachartier/.config/nvim/init.lua
Executing: so $VIMRUNTIME/syntax/syntax.vim
sourcing "/tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/syntax/syntax.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IThe Vim Project <https://github.com/vim/vim>
line 3: " Last Change:^I2023 Aug 10
line 4: " Former Maintainer:^IBram Moolenaar <Bram@vim.org>
line 5: 
line 6: " This file is used for ":syntax on".
line 7: " It installs the autocommands and starts highlighting for all buffers.
line 8: 
line 9: if !has("syntax")
line 10:   finish
line 11: endif
line 12: 
line 13: " If Syntax highlighting appears to be on already, turn it off first, so that
line 14: " any leftovers are cleared.
line 15: if exists("syntax_on") || exists("syntax_manual")
line 16:   so <sfile>:p:h/nosyntax.vim
line 17: endif
line 18: 
line 19: " Load the Syntax autocommands and set the default methods for highlighting.
line 20: runtime syntax/synload.vim
Searching for "syntax/synload.vim" in runtime path
Searching for "/home/rachartier/.config/nvim/syntax/synload.vim"
Searching for "/home/rachartier/.local/share/nvim/site/syntax/synload.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/lazy.nvim/syntax/synload.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-dap-python/syntax/synload.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-emoji/syntax/synload.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/syntax/synload.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-git/syntax/synload.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.compat/syntax/synload.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/LuaSnip/syntax/synload.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/friendly-snippets/syntax/synload.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.cmp/syntax/synload.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/alpha-nvim/syntax/synload.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/vim-cool/syntax/synload.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/syntax/synload.vim"
Searching for "/tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/syntax/synload.vim"
line 20: sourcing "/tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/syntax/synload.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IThe Vim Project <https://github.com/vim/vim>
line 3: " Last Change:^I2023 Aug 10
line 4: " Former Maintainer:^IBram Moolenaar <Bram@vim.org>
line 5: 
line 6: " This file sets up for syntax highlighting.
line 7: " It is loaded from "syntax.vim" and "manual.vim".
line 8: " 1. Set the default highlight groups.
line 9: " 2. Install Syntax autocommands for all the available syntax files.
line 10: 
line 11: if !has("syntax")
line 12:   finish
line 13: endif
line 14: 
line 15: " let others know that syntax has been switched on
line 16: let syntax_on = 1
line 17: 
line 18: " Line continuation is used here, remove 'C' from 'cpoptions'
line 19: let s:cpo_save = &cpo
line 20: set cpo&vim
line 21: 
line 22: " First remove all old syntax autocommands.
line 23: au! Syntax
line 24: 
line 25: au Syntax *^I^Icall s:SynSet()
line 26: 
line 27: fun! s:SynSet()
line 58: 
line 59: 
line 60: " Handle adding doxygen to other languages (C, C++, C#, IDL, java, php, DataScript)
line 61: au Syntax c,cpp,cs,idl,java,php,datascript if (exists('b:load_doxygen_syntax') && b:load_doxygen_syntax)^I|| (exists('g:load_doxygen_syntax') && g:load_doxygen_syntax)   | runtime! syntax/doxygen.vim | endif
line 66: 
line 67: 
line 68: " Source the user-specified syntax highlighting file
line 69: if exists("mysyntaxfile")
line 70:   let s:fname = expand(mysyntaxfile)
line 71:   if filereadable(s:fname)
line 72:     execute "source " . fnameescape(s:fname)
line 73:   endif
line 74: endif
line 75: 
line 76: " Restore 'cpoptions'
line 77: let &cpo = s:cpo_save
line 78: unlet s:cpo_save
finished sourcing /tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/syntax/synload.vim
continuing in /tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/syntax/syntax.vim
line 21: 
line 22: " Load the FileType autocommands if not done yet.
line 23: if exists("did_load_filetypes")
line 24:   let s:did_ft = 1
line 25: else
line 26:   filetype on
line 27:   let s:did_ft = 0
line 28: endif
line 29: 
line 30: " Set up the connection between FileType and Syntax autocommands.
line 31: " This makes the syntax automatically set when the file type is detected
line 32: " unless treesitter highlighting is enabled.
line 33: " Avoid an error when 'verbose' is set and <amatch> expansion fails.
line 34: augroup syntaxset
line 35:   au! FileType *^Iif !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif
line 36: augroup END
line 37: 
line 38: " Execute the syntax autocommands for the each buffer.
line 39: " If the filetype wasn't detected yet, do that now.
line 40: " Always do the syntaxset autocommands, for buffers where the 'filetype'
line 41: " already was set manually (e.g., help buffers).
line 42: doautoall syntaxset FileType
Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing: if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  endif
line 43: if !s:did_ft
line 44:   doautoall filetypedetect BufRead
line 45: endif
finished sourcing /tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/syntax/syntax.vim
Reading ShaDa file "/home/rachartier/.local/state/nvim/shada/main.shada" info marks oldfiles
Executing BufWinEnter Autocommands for "*"
autocommand <Lua 307: ~/.local/share/nvim/lazy/LuaSnip/plugin/luasnip.lua:77>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 385: ~/.config/nvim/lua/utils.lua:169>

Executing: checktime
Executing: 
Executing VimEnter Autocommands for "*"
autocommand <Lua 63: vim/_defaults.lua:0>

Executing: 
Executing VimEnter Autocommands for "*"
autocommand <Lua 271: ~/.local/share/nvim/lazy/alpha-nvim/lua/alpha.lua:784>

Executing BufDelete Autocommands for "*"
autocommand <Lua 309: ~/.local/share/nvim/lazy/LuaSnip/lua/luasnip/config.lua:116>

Executing: 
Executing FileType Autocommands for "*"
autocommand call s:LoadFTPlugin()

Executing: call s:LoadFTPlugin()
calling <SNR>2_LoadFTPlugin()

line 1:     if exists("b:undo_ftplugin")
line 2:       exe b:undo_ftplugin
line 3:       unlet! b:undo_ftplugin b:did_ftplugin
line 4:     endif
line 5: 
line 6:     let s = expand("<amatch>")
line 7:     if s != ""
line 8:       if &cpo =~# "S" && exists("b:did_ftplugin")
line 9: ^I" In compatible mode options are reset to the global values, need to
line 10: ^I" set the local values also when a plugin was already used.
line 11: ^Iunlet b:did_ftplugin
line 12:       endif
line 13: 
line 14:       " When there is a dot it is used to separate filetype names.  Thus for
line 15:       " "aaa.bbb" load "aaa" and then "bbb".
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 20:         exe $'runtime! ftplugin/{name}[.]{{vim,lua}} ftplugin/{name}_*.{{vim,lua}} ftplugin/{name}/*.{{vim,lua}}'
line 20: runtime! ftplugin/alpha[.]{vim,lua} ftplugin/alpha_*.{vim,lua} ftplugin/alpha/*.{vim,lua}
Searching for "ftplugin/alpha[.]{vim,lua} ftplugin/alpha_*.{vim,lua} ftplugin/alpha/*.{vim,lua}" in runtime path
Searching for "/home/rachartier/.config/nvim/ftplugin/alpha[.]{vim,lua}"
Searching for "/home/rachartier/.config/nvim/ftplugin/alpha_*.{vim,lua}"
Searching for "/home/rachartier/.config/nvim/ftplugin/alpha/*.{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/site/ftplugin/alpha[.]{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/site/ftplugin/alpha_*.{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/site/ftplugin/alpha/*.{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/lazy.nvim/ftplugin/alpha[.]{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/lazy.nvim/ftplugin/alpha_*.{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/lazy.nvim/ftplugin/alpha/*.{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-dap-python/ftplugin/alpha[.]{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-dap-python/ftplugin/alpha_*.{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-dap-python/ftplugin/alpha/*.{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-emoji/ftplugin/alpha[.]{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-emoji/ftplugin/alpha_*.{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-emoji/ftplugin/alpha/*.{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/ftplugin/alpha[.]{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/ftplugin/alpha_*.{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/ftplugin/alpha/*.{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-git/ftplugin/alpha[.]{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-git/ftplugin/alpha_*.{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-git/ftplugin/alpha/*.{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.compat/ftplugin/alpha[.]{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.compat/ftplugin/alpha_*.{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.compat/ftplugin/alpha/*.{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/LuaSnip/ftplugin/alpha[.]{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/LuaSnip/ftplugin/alpha_*.{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/LuaSnip/ftplugin/alpha/*.{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/friendly-snippets/ftplugin/alpha[.]{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/friendly-snippets/ftplugin/alpha_*.{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/friendly-snippets/ftplugin/alpha/*.{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.cmp/ftplugin/alpha[.]{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.cmp/ftplugin/alpha_*.{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.cmp/ftplugin/alpha/*.{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/alpha-nvim/ftplugin/alpha[.]{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/alpha-nvim/ftplugin/alpha_*.{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/alpha-nvim/ftplugin/alpha/*.{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/vim-cool/ftplugin/alpha[.]{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/vim-cool/ftplugin/alpha_*.{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/vim-cool/ftplugin/alpha/*.{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/ftplugin/alpha[.]{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/ftplugin/alpha_*.{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/ftplugin/alpha/*.{vim,lua}"
Searching for "/tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/ftplugin/alpha[.]{vim,lua}"
Searching for "/tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/ftplugin/alpha_*.{vim,lua}"
Searching for "/tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/ftplugin/alpha/*.{vim,lua}"
Searching for "/tmp/.mount_nvimAfSSiL/usr/lib/nvim/ftplugin/alpha[.]{vim,lua}"
Searching for "/tmp/.mount_nvimAfSSiL/usr/lib/nvim/ftplugin/alpha_*.{vim,lua}"
Searching for "/tmp/.mount_nvimAfSSiL/usr/lib/nvim/ftplugin/alpha/*.{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-emoji/after/ftplugin/alpha[.]{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-emoji/after/ftplugin/alpha_*.{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-emoji/after/ftplugin/alpha/*.{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/after/ftplugin/alpha[.]{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/after/ftplugin/alpha_*.{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/after/ftplugin/alpha/*.{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/after/ftplugin/alpha[.]{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/after/ftplugin/alpha_*.{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/after/ftplugin/alpha/*.{vim,lua}"
Searching for "/home/rachartier/.config/nvim/after/ftplugin/alpha[.]{vim,lua}"
Searching for "/home/rachartier/.config/nvim/after/ftplugin/alpha_*.{vim,lua}"
Searching for "/home/rachartier/.config/nvim/after/ftplugin/alpha/*.{vim,lua}"
Searching for "/home/rachartier/.local/state/nvim/lazy/readme/ftplugin/alpha[.]{vim,lua}"
Searching for "/home/rachartier/.local/state/nvim/lazy/readme/ftplugin/alpha_*.{vim,lua}"
Searching for "/home/rachartier/.local/state/nvim/lazy/readme/ftplugin/alpha/*.{vim,lua}"
not found in runtime path: "ftplugin/alpha[.]{vim,lua} ftplugin/alpha_*.{vim,lua} ftplugin/alpha/*.{vim,lua}"
line 21:       endfor
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 20:         exe $'runtime! ftplugin/{name}[.]{{vim,lua}} ftplugin/{name}_*.{{vim,lua}} ftplugin/{name}/*.{{vim,lua}}'
line 21:       endfor
line 22:     endif
<SNR>2_LoadFTPlugin returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

Executing: call s:LoadIndent()
calling <SNR>3_LoadIndent()

line 1:     if exists("b:undo_indent")
line 2:       exe b:undo_indent
line 3:       unlet! b:undo_indent b:did_indent
line 4:     endif
line 5:     let s = expand("<amatch>")
line 6:     if s != ""
line 7:       if exists("b:did_indent")
line 8: ^Iunlet b:did_indent
line 9:       endif
line 10: 
line 11:       " When there is a dot it is used to separate filetype names.  Thus for
line 12:       " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
line 13:       for name in split(s, '\.')
line 14:         " XXX: "[.]" in the pattern makes it a wildcard on Windows
line 15:         exe $'runtime! indent/{name}[.]{{vim,lua}}'
line 15: runtime! indent/alpha[.]{vim,lua}
Searching for "indent/alpha[.]{vim,lua}" in runtime path
Searching for "/home/rachartier/.config/nvim/indent/alpha[.]{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/site/indent/alpha[.]{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/lazy.nvim/indent/alpha[.]{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-dap-python/indent/alpha[.]{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-emoji/indent/alpha[.]{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/indent/alpha[.]{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-git/indent/alpha[.]{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.compat/indent/alpha[.]{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/LuaSnip/indent/alpha[.]{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/friendly-snippets/indent/alpha[.]{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.cmp/indent/alpha[.]{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/alpha-nvim/indent/alpha[.]{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/vim-cool/indent/alpha[.]{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/indent/alpha[.]{vim,lua}"
Searching for "/tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/indent/alpha[.]{vim,lua}"
Searching for "/tmp/.mount_nvimAfSSiL/usr/lib/nvim/indent/alpha[.]{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-emoji/after/indent/alpha[.]{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/after/indent/alpha[.]{vim,lua}"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/after/indent/alpha[.]{vim,lua}"
Searching for "/home/rachartier/.config/nvim/after/indent/alpha[.]{vim,lua}"
Searching for "/home/rachartier/.local/state/nvim/lazy/readme/indent/alpha[.]{vim,lua}"
not found in runtime path: "indent/alpha[.]{vim,lua}"
line 16:       endfor
line 13:       for name in split(s, '\.')
line 14:         " XXX: "[.]" in the pattern makes it a wildcard on Windows
line 15:         exe $'runtime! indent/{name}[.]{{vim,lua}}'
line 16:       endfor
line 17:     endif
<SNR>3_LoadIndent returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "alpha"
autocommand <Lua 256: ~/.config/nvim/lua/utils.lua:169>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 308: ~/.local/share/nvim/lazy/LuaSnip/plugin/luasnip.lua:77>

Executing: 
Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing: if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  endif
Executing: 
Executing UIEnter Autocommands for "*"
autocommand <Lua 65: ~/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/config.lua:326>

Executing User Autocommands for "LazyVimStarted"
autocommand <Lua 190: ~/.config/nvim/lua/plugins/ui/alpha.lua:277>

Executing: 
Executing: 
Executing UIEnter Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/event.lua:72>

Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup filetypedetect
Executing: augroup END
Executing: 
Executing UIEnter Autocommands for "*"
autocommand <Lua 346: ~/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/util.lua:189>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 147: ~/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/event.lua:72>

Executing: augroup filetypedetect
Executing: augroup END
Executing CursorMoved Autocommands for "*"
autocommand <Lua 404: ~/.local/share/nvim/lazy/mini.cursorword/lua/mini/cursorword.lua:187>

Executing: 
Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call <SID>StartHL()

Executing: call <SID>StartHL()
calling <SNR>20_StartHL()

line 1:     if !v:hlsearch || mode() isnot 'n'
line 2:         return
<SNR>20_StartHL returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "<buffer=1>"
autocommand <Lua 389: ~/.local/share/nvim/lazy/alpha-nvim/lua/alpha.lua:525>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand <Lua 306: ~/.local/share/nvim/lazy/LuaSnip/lua/luasnip/init.lua:607>

Executing: 
Executing User Autocommands for "VeryLazy"
autocommand <Lua 66: ~/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/config.lua:337>

Executing: 
Executing User Autocommands for "VeryLazy"
autocommand <Lua 92: ~/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/event.lua:72>

Executing: augroup filetypedetect
Executing: augroup END
Executing: source /home/rachartier/.local/share/nvim/lazy/playground/plugin/nvim-treesitter-playground.lua
line 0: sourcing "/home/rachartier/.local/share/nvim/lazy/playground/plugin/nvim-treesitter-playground.lua"
finished sourcing /home/rachartier/.local/share/nvim/lazy/playground/plugin/nvim-treesitter-playground.lua
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup filetypedetect
Executing: augroup END
Executing: source /home/rachartier/.local/share/nvim/lazy/nvim-treesitter-textobjects/plugin/nvim-treesitter-textobjects.vim
line 0: sourcing "/home/rachartier/.local/share/nvim/lazy/nvim-treesitter-textobjects/plugin/nvim-treesitter-textobjects.vim"
line 1: lua << EOF
line 3: command! -bar -nargs=1 -complete=custom,nvim_treesitter_textobjects#available_textobjects TSTextobjectSelect lua require'nvim-treesitter.textobjects.select'.commands.TSTextobjectSelect['run<bang>'](<f-args>)
line 3: command! -bar -nargs=1 -complete=custom,nvim_treesitter_textobjects#available_textobjects TSTextobjectGotoNextEnd lua require'nvim-treesitter.textobjects.move'.commands.TSTextobjectGotoNextEnd['run<bang>'](<f-args>)
line 3: command! -bar -nargs=1 -complete=custom,nvim_treesitter_textobjects#available_textobjects TSTextobjectGotoNextStart lua require'nvim-treesitter.textobjects.move'.commands.TSTextobjectGotoNextStart['run<bang>'](<f-args>)
line 3: command! -bar -nargs=1 -complete=custom,nvim_treesitter_textobjects#available_textobjects TSTextobjectGotoPreviousEnd lua require'nvim-treesitter.textobjects.move'.commands.TSTextobjectGotoPreviousEnd['run<bang>'](<f-args>)
line 3: command! -bar -nargs=1 -complete=custom,nvim_treesitter_textobjects#available_textobjects TSTextobjectGotoPreviousStart lua require'nvim-treesitter.textobjects.move'.commands.TSTextobjectGotoPreviousStart['run<bang>'](<f-args>)
line 3: command! -bar TSTextobjectRepeatLastMove lua require'nvim-treesitter.textobjects.repeatable_move'.commands.TSTextobjectRepeatLastMove['run<bang>'](<f-args>)
line 3: command! -bar TSTextobjectBuiltinT lua require'nvim-treesitter.textobjects.repeatable_move'.commands.TSTextobjectBuiltinT['run<bang>'](<f-args>)
line 3: command! -bar TSTextobjectBuiltint lua require'nvim-treesitter.textobjects.repeatable_move'.commands.TSTextobjectBuiltint['run<bang>'](<f-args>)
line 3: command! -bar TSTextobjectBuiltinF lua require'nvim-treesitter.textobjects.repeatable_move'.commands.TSTextobjectBuiltinF['run<bang>'](<f-args>)
line 3: command! -bar TSTextobjectBuiltinf lua require'nvim-treesitter.textobjects.repeatable_move'.commands.TSTextobjectBuiltinf['run<bang>'](<f-args>)
line 3: command! -bar TSTextobjectRepeatLastMovePrevious lua require'nvim-treesitter.textobjects.repeatable_move'.commands.TSTextobjectRepeatLastMovePrevious['run<bang>'](<f-args>)
line 3: command! -bar TSTextobjectRepeatLastMoveNext lua require'nvim-treesitter.textobjects.repeatable_move'.commands.TSTextobjectRepeatLastMoveNext['run<bang>'](<f-args>)
line 3: command! -bar TSTextobjectRepeatLastMoveOpposite lua require'nvim-treesitter.textobjects.repeatable_move'.commands.TSTextobjectRepeatLastMoveOpposite['run<bang>'](<f-args>)
line 3: command! -bar -nargs=1 -complete=custom,nvim_treesitter_textobjects#available_textobjects TSTextobjectSwapPrevious lua require'nvim-treesitter.textobjects.swap'.commands.TSTextobjectSwapPrevious['run<bang>'](<f-args>)
line 3: command! -bar -nargs=1 -complete=custom,nvim_treesitter_textobjects#available_textobjects TSTextobjectSwapNext lua require'nvim-treesitter.textobjects.swap'.commands.TSTextobjectSwapNext['run<bang>'](<f-args>)
line 3: command! -bar -nargs=+ -complete=custom,nvim_treesitter_textobjects#available_textobjects TSTextobjectPeekDefinitionCode lua require'nvim-treesitter.textobjects.lsp_interop'.commands.TSTextobjectPeekDefinitionCode['run<bang>'](<f-args>)
finished sourcing /home/rachartier/.local/share/nvim/lazy/nvim-treesitter-textobjects/plugin/nvim-treesitter-textobjects.vim
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup filetypedetect
Executing: augroup END
Executing: source /home/rachartier/.local/share/nvim/lazy/nvim-treesitter/plugin/nvim-treesitter.lua
line 0: sourcing "/home/rachartier/.local/share/nvim/lazy/nvim-treesitter/plugin/nvim-treesitter.lua"
Executing: command! -bar -nargs=+ -bang -complete=custom,nvim_treesitter#installable_parsers TSInstallSync lua require'nvim-treesitter.install'.commands.TSInstallSync['run<bang>'](<f-args>)
Executing: command! -bar -nargs=* -complete=custom,nvim_treesitter#installed_parsers TSUpdateSync lua require'nvim-treesitter.install'.commands.TSUpdateSync['run<bang>'](<f-args>)
Executing: command! -bar -nargs=+ -bang -complete=custom,nvim_treesitter#installable_parsers TSInstallFromGrammar lua require'nvim-treesitter.install'.commands.TSInstallFromGrammar['run<bang>'](<f-args>)
Executing: command! -bar -nargs=+ -bang -complete=custom,nvim_treesitter#installable_parsers TSInstall lua require'nvim-treesitter.install'.commands.TSInstall['run<bang>'](<f-args>)
Executing: command! -bar -nargs=+ -complete=custom,nvim_treesitter#installed_parsers TSUninstall lua require'nvim-treesitter.install'.commands.TSUninstall['run<bang>'](<f-args>)
Executing: command! -bar -nargs=* -complete=custom,nvim_treesitter#installed_parsers TSUpdate lua require'nvim-treesitter.install'.commands.TSUpdate['run<bang>'](<f-args>)
Executing: command! -bar -nargs=? -complete=custom,nvim_treesitter#available_modules TSModuleInfo lua require'nvim-treesitter.info'.commands.TSModuleInfo['run<bang>'](<f-args>)
Executing: command! -bar -nargs=0 TSInstallInfo lua require'nvim-treesitter.info'.commands.TSInstallInfo['run<bang>'](<f-args>)
Executing: command! -bar -nargs=1 -complete=custom,nvim_treesitter#available_modules TSBufEnable lua require'nvim-treesitter.configs'.commands.TSBufEnable['run<bang>'](<f-args>)
Executing: command! -bar -nargs=+ -complete=custom,nvim_treesitter#available_query_groups TSEditQueryUserAfter lua require'nvim-treesitter.configs'.commands.TSEditQueryUserAfter['run<bang>'](<f-args>)
Executing: command! -bar -nargs=+ -complete=custom,nvim_treesitter#available_query_groups TSEditQuery lua require'nvim-treesitter.configs'.commands.TSEditQuery['run<bang>'](<f-args>)
Executing: command! -bar -nargs=0 TSConfigInfo lua require'nvim-treesitter.configs'.commands.TSConfigInfo['run<bang>'](<f-args>)
Executing: command! -bar -nargs=+ -complete=custom,nvim_treesitter#available_modules TSToggle lua require'nvim-treesitter.configs'.commands.TSToggle['run<bang>'](<f-args>)
Executing: command! -bar -nargs=+ -complete=custom,nvim_treesitter#available_modules TSDisable lua require'nvim-treesitter.configs'.commands.TSDisable['run<bang>'](<f-args>)
Executing: command! -bar -nargs=+ -complete=custom,nvim_treesitter#available_modules TSEnable lua require'nvim-treesitter.configs'.commands.TSEnable['run<bang>'](<f-args>)
Executing: command! -bar -nargs=1 -complete=custom,nvim_treesitter#available_modules TSBufToggle lua require'nvim-treesitter.configs'.commands.TSBufToggle['run<bang>'](<f-args>)
Executing: command! -bar -nargs=1 -complete=custom,nvim_treesitter#available_modules TSBufDisable lua require'nvim-treesitter.configs'.commands.TSBufDisable['run<bang>'](<f-args>)
finished sourcing /home/rachartier/.local/share/nvim/lazy/nvim-treesitter/plugin/nvim-treesitter.lua
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup filetypedetect
Executing: augroup END
Searching for "parser/markdown.so" in runtime path
Searching for "/home/rachartier/.config/nvim/parser/markdown.so"
Searching for "/home/rachartier/.local/share/nvim/site/parser/markdown.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/lazy.nvim/parser/markdown.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/markdown.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/playground/parser/markdown.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-treesitter/parser/markdown.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/edgy.nvim/parser/markdown.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/mini.cursorword/parser/markdown.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/nui.nvim/parser/markdown.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/noice.nvim/parser/markdown.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-dap-python/parser/markdown.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-emoji/parser/markdown.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/parser/markdown.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-git/parser/markdown.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.compat/parser/markdown.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/LuaSnip/parser/markdown.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/friendly-snippets/parser/markdown.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.cmp/parser/markdown.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/alpha-nvim/parser/markdown.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/vim-cool/parser/markdown.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/parser/markdown.so"
Searching for "/tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/parser/markdown.so"
Searching for "/tmp/.mount_nvimAfSSiL/usr/lib/nvim/parser/markdown.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/playground/after/parser/markdown.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-emoji/after/parser/markdown.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/after/parser/markdown.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/after/parser/markdown.so"
Searching for "/home/rachartier/.config/nvim/after/parser/markdown.so"
Searching for "/home/rachartier/.local/state/nvim/lazy/readme/parser/markdown.so"
Searching for "parser/markdown_inline.so" in runtime path
Searching for "/home/rachartier/.config/nvim/parser/markdown_inline.so"
Searching for "/home/rachartier/.local/share/nvim/site/parser/markdown_inline.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/lazy.nvim/parser/markdown_inline.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/markdown_inline.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/playground/parser/markdown_inline.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-treesitter/parser/markdown_inline.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/edgy.nvim/parser/markdown_inline.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/mini.cursorword/parser/markdown_inline.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/nui.nvim/parser/markdown_inline.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/noice.nvim/parser/markdown_inline.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-dap-python/parser/markdown_inline.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-emoji/parser/markdown_inline.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/parser/markdown_inline.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-git/parser/markdown_inline.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.compat/parser/markdown_inline.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/LuaSnip/parser/markdown_inline.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/friendly-snippets/parser/markdown_inline.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.cmp/parser/markdown_inline.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/alpha-nvim/parser/markdown_inline.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/vim-cool/parser/markdown_inline.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/parser/markdown_inline.so"
Searching for "/tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/parser/markdown_inline.so"
Searching for "/tmp/.mount_nvimAfSSiL/usr/lib/nvim/parser/markdown_inline.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/playground/after/parser/markdown_inline.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-emoji/after/parser/markdown_inline.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/after/parser/markdown_inline.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/after/parser/markdown_inline.so"
Searching for "/home/rachartier/.config/nvim/after/parser/markdown_inline.so"
Searching for "/home/rachartier/.local/state/nvim/lazy/readme/parser/markdown_inline.so"
Searching for "parser/regex.so" in runtime path
Searching for "/home/rachartier/.config/nvim/parser/regex.so"
Searching for "/home/rachartier/.local/share/nvim/site/parser/regex.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/lazy.nvim/parser/regex.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/regex.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/playground/parser/regex.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-treesitter/parser/regex.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/edgy.nvim/parser/regex.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/mini.cursorword/parser/regex.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/nui.nvim/parser/regex.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/noice.nvim/parser/regex.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-dap-python/parser/regex.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-emoji/parser/regex.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/parser/regex.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-git/parser/regex.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.compat/parser/regex.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/LuaSnip/parser/regex.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/friendly-snippets/parser/regex.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.cmp/parser/regex.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/alpha-nvim/parser/regex.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/vim-cool/parser/regex.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/parser/regex.so"
Searching for "/tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/parser/regex.so"
Searching for "/tmp/.mount_nvimAfSSiL/usr/lib/nvim/parser/regex.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/playground/after/parser/regex.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-emoji/after/parser/regex.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/after/parser/regex.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/after/parser/regex.so"
Searching for "/home/rachartier/.config/nvim/after/parser/regex.so"
Searching for "/home/rachartier/.local/state/nvim/lazy/readme/parser/regex.so"
Searching for "parser/vim.so" in runtime path
Searching for "/home/rachartier/.config/nvim/parser/vim.so"
Searching for "/home/rachartier/.local/share/nvim/site/parser/vim.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/lazy.nvim/parser/vim.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/vim.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/playground/parser/vim.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-treesitter/parser/vim.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/edgy.nvim/parser/vim.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/mini.cursorword/parser/vim.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/nui.nvim/parser/vim.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/noice.nvim/parser/vim.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-dap-python/parser/vim.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-emoji/parser/vim.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/parser/vim.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-git/parser/vim.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.compat/parser/vim.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/LuaSnip/parser/vim.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/friendly-snippets/parser/vim.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.cmp/parser/vim.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/alpha-nvim/parser/vim.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/vim-cool/parser/vim.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/parser/vim.so"
Searching for "/tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/parser/vim.so"
Searching for "/tmp/.mount_nvimAfSSiL/usr/lib/nvim/parser/vim.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/playground/after/parser/vim.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-emoji/after/parser/vim.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/after/parser/vim.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/after/parser/vim.so"
Searching for "/home/rachartier/.config/nvim/after/parser/vim.so"
Searching for "/home/rachartier/.local/state/nvim/lazy/readme/parser/vim.so"
Searching for "parser/requirements.so" in runtime path
Searching for "/home/rachartier/.config/nvim/parser/requirements.so"
Searching for "/home/rachartier/.local/share/nvim/site/parser/requirements.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/lazy.nvim/parser/requirements.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/requirements.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/playground/parser/requirements.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-treesitter/parser/requirements.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/edgy.nvim/parser/requirements.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/mini.cursorword/parser/requirements.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/nui.nvim/parser/requirements.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/noice.nvim/parser/requirements.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-dap-python/parser/requirements.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-emoji/parser/requirements.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/parser/requirements.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-git/parser/requirements.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.compat/parser/requirements.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/LuaSnip/parser/requirements.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/friendly-snippets/parser/requirements.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.cmp/parser/requirements.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/alpha-nvim/parser/requirements.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/vim-cool/parser/requirements.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/parser/requirements.so"
Searching for "/tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/parser/requirements.so"
Searching for "/tmp/.mount_nvimAfSSiL/usr/lib/nvim/parser/requirements.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/playground/after/parser/requirements.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-emoji/after/parser/requirements.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/after/parser/requirements.so"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/after/parser/requirements.so"
Searching for "/home/rachartier/.config/nvim/after/parser/requirements.so"
Searching for "/home/rachartier/.local/state/nvim/lazy/readme/parser/requirements.so"
Searching for "parser/alpha.*" in runtime path
Searching for "/home/rachartier/.config/nvim/parser/alpha.*"
Searching for "/home/rachartier/.local/share/nvim/site/parser/alpha.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/lazy.nvim/parser/alpha.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/alpha.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/playground/parser/alpha.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-treesitter/parser/alpha.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/edgy.nvim/parser/alpha.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/mini.cursorword/parser/alpha.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/nui.nvim/parser/alpha.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/noice.nvim/parser/alpha.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-dap-python/parser/alpha.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-emoji/parser/alpha.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/parser/alpha.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-git/parser/alpha.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.compat/parser/alpha.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/LuaSnip/parser/alpha.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/friendly-snippets/parser/alpha.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.cmp/parser/alpha.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/alpha-nvim/parser/alpha.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/vim-cool/parser/alpha.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/parser/alpha.*"
Searching for "/tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/parser/alpha.*"
Searching for "/tmp/.mount_nvimAfSSiL/usr/lib/nvim/parser/alpha.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/playground/after/parser/alpha.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-emoji/after/parser/alpha.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/after/parser/alpha.*"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/after/parser/alpha.*"
Searching for "/home/rachartier/.config/nvim/after/parser/alpha.*"
Searching for "/home/rachartier/.local/state/nvim/lazy/readme/parser/alpha.*"
not found in runtime path: "parser/alpha.*"
Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup filetypedetect
Executing: augroup END
Executing: source /home/rachartier/.local/share/nvim/lazy/Comment.nvim/plugin/Comment.lua
line 0: sourcing "/home/rachartier/.local/share/nvim/lazy/Comment.nvim/plugin/Comment.lua"
finished sourcing /home/rachartier/.local/share/nvim/lazy/Comment.nvim/plugin/Comment.lua
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup filetypedetect
Executing: augroup END
Executing: source /home/rachartier/.local/share/nvim/lazy/vim-matchup/plugin/matchup.vim
line 0: sourcing "/home/rachartier/.local/share/nvim/lazy/vim-matchup/plugin/matchup.vim"
line 1: " vim match-up - even better matching
line 2: "
line 3: " Maintainer: Andy Massimino
line 4: " Email:      a@normed.space
line 5: "
line 6: 
line 7: if !get(g:, 'matchup_enabled', 1) || &cp
line 8:   finish
line 9: endif
line 10: 
line 11: if !get(g:, 'matchup_no_version_check', 0) && !(v:version >= 704 || has('nvim-0.1.7'))
line 13:   echoerr 'match-up does not support this version of vim'
line 14:   finish
line 15: endif
line 16: 
line 17: if !has('reltime')
line 18:   echoerr 'match-up requires reltime()'
line 19:   finish
line 20: endif
line 21: 
line 22: if exists('g:loaded_matchup')
line 23:   finish
line 24: endif
line 25: let g:loaded_matchup = 1
line 26: 
line 27: if exists('g:loaded_matchit') && exists(':MatchDebug')
line 28:   call matchup#unmatchit#()
line 29: endif
line 30: let g:loaded_matchit = 1
line 31: 
line 32: " ensure pi_paren is loaded but deactivated
line 33: try
line 34:   runtime plugin/matchparen.vim
Searching for "plugin/matchparen.vim" in runtime path
Searching for "/home/rachartier/.config/nvim/plugin/matchparen.vim"
Searching for "/home/rachartier/.local/share/nvim/site/plugin/matchparen.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/lazy.nvim/plugin/matchparen.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/vim-matchup/plugin/matchparen.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/Comment.nvim/plugin/matchparen.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/quicker.nvim/plugin/matchparen.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/mini.indentscope/plugin/matchparen.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-treesitter-textobjects/plugin/matchparen.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/playground/plugin/matchparen.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-treesitter/plugin/matchparen.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/edgy.nvim/plugin/matchparen.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/mini.cursorword/plugin/matchparen.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/nui.nvim/plugin/matchparen.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/noice.nvim/plugin/matchparen.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-dap-python/plugin/matchparen.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-emoji/plugin/matchparen.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/plugin/matchparen.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-git/plugin/matchparen.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.compat/plugin/matchparen.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/LuaSnip/plugin/matchparen.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/friendly-snippets/plugin/matchparen.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.cmp/plugin/matchparen.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/alpha-nvim/plugin/matchparen.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/vim-cool/plugin/matchparen.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/plugin/matchparen.vim"
Searching for "/tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/plugin/matchparen.vim"
line 34: sourcing "/tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/plugin/matchparen.vim"
line 1: " Vim plugin for showing matching parens
line 2: " Maintainer:^IThe Vim Project <https://github.com/vim/vim>
line 3: " Last Change:^I2024 May 18
line 4: " Former Maintainer:^IBram Moolenaar <Bram@vim.org>
line 5: 
line 6: " Exit quickly when:
line 7: " - this plugin was already loaded (or disabled)
line 8: " - when 'compatible' is set
line 9: if exists("g:loaded_matchparen") || &cp
line 10:   finish
line 11: endif
line 12: let g:loaded_matchparen = 1
line 13: 
line 14: if !exists("g:matchparen_timeout")
line 15:   let g:matchparen_timeout = 300
line 16: endif
line 17: if !exists("g:matchparen_insert_timeout")
line 18:   let g:matchparen_insert_timeout = 60
line 19: endif
line 20: if !exists("g:matchparen_disable_cursor_hl")
line 21:   let g:matchparen_disable_cursor_hl = 0
line 22: endif
line 23: 
line 24: let s:has_matchaddpos = exists('*matchaddpos')
line 25: 
line 26: augroup matchparen
line 27:   " Replace all matchparen autocommands
line 28:   autocmd! CursorMoved,CursorMovedI,WinEnter,WinScrolled * call s:Highlight_Matching_Pair()
line 29:   autocmd! BufWinEnter * autocmd SafeState * ++once call s:Highlight_Matching_Pair()
line 30:   autocmd! WinLeave,BufLeave * call s:Remove_Matches()
line 31:   if exists('##TextChanged')
line 32:     autocmd! TextChanged,TextChangedI * call s:Highlight_Matching_Pair()
line 33:     autocmd! TextChangedP * call s:Remove_Matches()
line 34:   endif
line 35: augroup END
line 36: 
line 37: " Skip the rest if it was already done.
line 38: if exists("*s:Highlight_Matching_Pair")
line 39:   finish
line 40: endif
line 41: 
line 42: let s:cpo_save = &cpo
line 43: set cpo-=C
line 44: 
line 45: " The function that is invoked (very often) to define a ":match" highlighting
line 46: " for any matching paren.
line 47: func s:Highlight_Matching_Pair()
line 212: 
line 213: func s:Remove_Matches()
line 221: 
line 222: " Define commands that will disable and enable the plugin.
line 223: command DoMatchParen call s:DoMatchParen()
line 224: command NoMatchParen call s:NoMatchParen()
line 225: 
line 226: func s:NoMatchParen()
line 233: 
line 234: func s:DoMatchParen()
line 240: 
line 241: let &cpo = s:cpo_save
line 242: unlet s:cpo_save
finished sourcing /tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/plugin/matchparen.vim
continuing in /home/rachartier/.local/share/nvim/lazy/vim-matchup/plugin/matchup.vim
line 35:   au! matchparen
line 36: catch /^Vim\%((\a\+)\)\=:E216/
line 37:   unlet! g:loaded_matchparen
line 38:   runtime plugin/matchparen.vim
line 39:   silent! au! matchparen
line 40:   let g:loaded_matchparen = 1
line 41: endtry
line 42: command! NoMatchParen call matchup#matchparen#toggle(0)
line 43: command! DoMatchParen call matchup#matchparen#toggle(1)
line 44: 
line 45: hi def link MatchParenCur MatchParen
line 46: hi def link MatchWord MatchParen
line 47: " hi def link MatchWordCur MatchParenCur
line 48: hi def link MatchBackground ColorColumn
line 49: 
line 50: if get(g:, 'matchup_override_vimtex', 0)
line 51:   let g:vimtex_matchparen_enabled = 0
line 52: endif
line 53: 
line 54: call matchup#init()
Searching for "autoload/matchup.vim" in runtime path
Searching for "/home/rachartier/.config/nvim/autoload/matchup.vim"
Searching for "/home/rachartier/.local/share/nvim/site/autoload/matchup.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/lazy.nvim/autoload/matchup.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/vim-matchup/autoload/matchup.vim"
line 54: sourcing "/home/rachartier/.local/share/nvim/lazy/vim-matchup/autoload/matchup.vim"
line 1: " vim match-up - even better matching
line 2: "
line 3: " Maintainer: Andy Massimino
line 4: " Email:      a@normed.space
line 5: "
line 6: 
line 7: scriptencoding utf-8
line 8: 
line 9: let s:save_cpo = &cpo
line 10: set cpo&vim
line 11: 
line 12: function! matchup#init() abort
line 21: 
line 22: function! s:init_options()
line 80: 
line 81: function! s:init_option(option, default)
line 86: 
line 87: function! s:init_modules()
line 104: 
line 105: function! s:init_oldstyle_ops() " {{{1
line 138: 
line 139: function! s:make_oldstyle_omaps(lhs, rhs)
line 149: 
line 150: let s:old_style_ops = !(has('patch-8.1.0648') || has('nvim-0.5.0'))
line 151: 
line 152: let g:v_motion_force = ''
line 153: function! s:force(wise)
line 157: 
line 158: function! matchup#motion_force() abort
line 166: 
line 167: " }}}1
line 168: 
line 169: let s:ignore_key = len(expand("\<ignore>")) > 0 ? '<ignore>' : ''
line 170: 
line 171: function! s:init_default_mappings()
line 239: 
line 240: " module initialization
line 241: 
line 242: function! s:motion_init_module() " {{{1
line 336: 
line 337: " TODO redo this
line 338: function! s:snr()
line 341: let s:sid = printf("\<SNR>%d_", s:snr())
calling <SNR>64_snr()

line 1:   return str2nr(matchstr(expand('<sfile>'), '<SNR>\zs\d\+\ze_snr$'))
<SNR>64_snr returning #64

continuing in /home/rachartier/.local/share/nvim/lazy/vim-matchup/autoload/matchup.vim

line 342: 
line 343: function! matchup#motion_sid() abort
line 346: 
line 347: " }}}1
line 348: function! s:text_obj_init_module() " {{{1
line 370: 
line 371: " }}}1
line 372: function! s:misc_init_module() " {{{1
line 378: 
line 379: " }}}1
line 380: function! s:surround_init_module() " {{{1
line 397: 
line 398: " }}}1
line 399: function! s:where_init_module() " {{{1
line 405: 
line 406: " }}}1
line 407: function! s:treesitter_init_module() " {{{1
line 423: 
line 424: "}}}1
line 425: 
line 426: let &cpo = s:save_cpo
line 427: 
line 428: " vim: fdm=marker sw=2
finished sourcing /home/rachartier/.local/share/nvim/lazy/vim-matchup/autoload/matchup.vim
continuing in /home/rachartier/.local/share/nvim/lazy/vim-matchup/plugin/matchup.vim
calling matchup#init()

line 1:   call matchup#perf#tic('loading')
Searching for "autoload/matchup/perf.vim" in runtime path
Searching for "/home/rachartier/.config/nvim/autoload/matchup/perf.vim"
Searching for "/home/rachartier/.local/share/nvim/site/autoload/matchup/perf.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/lazy.nvim/autoload/matchup/perf.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/vim-matchup/autoload/matchup/perf.vim"
line 1: sourcing "/home/rachartier/.local/share/nvim/lazy/vim-matchup/autoload/matchup/perf.vim"
line 1: " vim match-up - even better matching
line 2: "
line 3: " Maintainer: Andy Massimino
line 4: " Email:      a@normed.space
line 5: "
line 6: 
line 7: let s:save_cpo = &cpo
line 8: set cpo&vim
line 9: 
line 10: let s:time_start = {}
line 11: let s:alpha = 2.0/(10+1)
line 12: 
line 13: let g:matchup#perf#times = {}
line 14: 
line 15: function! matchup#perf#tic(context)
line 18: 
line 19: function! matchup#perf#toc(context, state)
line 38: 
line 39: function! s:sort_by_last(a, b)
line 44: 
line 45: function! matchup#perf#show_times()
line 71: 
line 72: command! MatchupShowTimes call matchup#perf#show_times()
line 73: command! MatchupClearTimes let g:matchup#perf#times = {}
line 74: 
line 75: let s:timeout = 0
line 76: let s:timeout_enabled = 0
line 77: let s:timeout_pulse_time = reltime()
line 78: 
line 79: function! matchup#perf#timeout() " {{{1
line 82: 
line 83: "}}}1
line 84: function! matchup#perf#timeout_start(timeout) " {{{1
line 89: 
line 90: " }}}1
line 91: function! matchup#perf#timeout_check() " {{{1
line 98: 
line 99: " }}}1
line 100: 
line 101: " function! s:reltimefloat(time) {{{1
line 102: if exists('*reltimefloat')
line 103:   let s:Reltimefloat = function('reltimefloat')
line 104: else
line 105:   function! s:Reltimefloat(time)
line 108: endif
line 109: 
line 110: " }}}1
line 111: 
line 112: let &cpo = s:save_cpo
line 113: 
line 114: " vim: fdm=marker sw=2
line 115: 
finished sourcing /home/rachartier/.local/share/nvim/lazy/vim-matchup/autoload/matchup/perf.vim
continuing in matchup#init
calling matchup#perf#tic('loading')

line 1:   let s:time_start[a:context] = reltime()
matchup#perf#tic returning #0

continuing in matchup#init

line 2: 
line 3:   call s:init_options()
calling <SNR>64_init_options()

line 1:   call s:init_option('matchup_matchparen_enabled', !(&t_Co < 8 && !has('gui_running')))
calling <SNR>64_init_option('matchup_matchparen_enabled', 1)

line 1:   if !has_key(g:, a:option)
line 2:     let g:[a:option] = a:default
line 3:   endif
<SNR>64_init_option returning #0

continuing in <SNR>64_init_options

line 3:   let l:offs = {'method': 'status'}
line 4:   if !get(g:, 'matchup_matchparen_status_offscreen', 1)
line 5:     let l:offs = {}
line 6:   endif
line 7:   if get(g:, 'matchup_matchparen_status_offscreen_manual', 0)
line 8:     let l:offs.method = 'status_manual'
line 9:   endif
line 10:   if exists('g:matchup_matchparen_scrolloff')
line 11:     let l:offs.scrolloff = g:matchup_matchparen_scrolloff
line 12:   endif
line 13:   call s:init_option('matchup_matchparen_offscreen', l:offs)
calling <SNR>64_init_option('matchup_matchparen_offscreen', {'method': 'status'})

line 1:   if !has_key(g:, a:option)
line 2:     let g:[a:option] = a:default
line 3:   endif
<SNR>64_init_option returning #0

continuing in <SNR>64_init_options

line 14:   call s:init_option('matchup_matchparen_singleton', 0)
calling <SNR>64_init_option('matchup_matchparen_singleton', 0)

line 1:   if !has_key(g:, a:option)
line 2:     let g:[a:option] = a:default
line 3:   endif
<SNR>64_init_option returning #0

continuing in <SNR>64_init_options

line 15:   call s:init_option('matchup_matchparen_deferred', 0)
calling <SNR>64_init_option('matchup_matchparen_deferred', 0)

line 1:   if !has_key(g:, a:option)
line 2:     let g:[a:option] = a:default
line 3:   endif
<SNR>64_init_option returning #0

continuing in <SNR>64_init_options

line 16:   call s:init_option('matchup_matchparen_deferred_show_delay', 50)
calling <SNR>64_init_option('matchup_matchparen_deferred_show_delay', 50)

line 1:   if !has_key(g:, a:option)
line 2:     let g:[a:option] = a:default
line 3:   endif
<SNR>64_init_option returning #0

continuing in <SNR>64_init_options

line 17:   call s:init_option('matchup_matchparen_deferred_hide_delay', 700)
calling <SNR>64_init_option('matchup_matchparen_deferred_hide_delay', 700)

line 1:   if !has_key(g:, a:option)
line 2:     let g:[a:option] = a:default
line 3:   endif
<SNR>64_init_option returning #0

continuing in <SNR>64_init_options

line 18:   call s:init_option('matchup_matchparen_deferred_fade_time', 0)
calling <SNR>64_init_option('matchup_matchparen_deferred_fade_time', 0)

line 1:   if !has_key(g:, a:option)
line 2:     let g:[a:option] = a:default
line 3:   endif
<SNR>64_init_option returning #0

continuing in <SNR>64_init_options

line 19:   call s:init_option('matchup_matchparen_stopline', 400)
calling <SNR>64_init_option('matchup_matchparen_stopline', 400)

line 1:   if !has_key(g:, a:option)
line 2:     let g:[a:option] = a:default
line 3:   endif
<SNR>64_init_option returning #0

continuing in <SNR>64_init_options

line 20:   call s:init_option('matchup_matchparen_pumvisible', 1)
calling <SNR>64_init_option('matchup_matchparen_pumvisible', 1)

line 1:   if !has_key(g:, a:option)
line 2:     let g:[a:option] = a:default
line 3:   endif
<SNR>64_init_option returning #0

continuing in <SNR>64_init_options

line 21:   call s:init_option('matchup_matchparen_nomode', '')
calling <SNR>64_init_option('matchup_matchparen_nomode', '')

line 1:   if !has_key(g:, a:option)
line 2:     let g:[a:option] = a:default
line 3:   endif
<SNR>64_init_option returning #0

continuing in <SNR>64_init_options

line 22:   call s:init_option('matchup_matchparen_hi_surround_always', 0)
calling <SNR>64_init_option('matchup_matchparen_hi_surround_always', 0)

line 1:   if !has_key(g:, a:option)
line 2:     let g:[a:option] = a:default
line 3:   endif
<SNR>64_init_option returning #0

continuing in <SNR>64_init_options

line 23:   call s:init_option('matchup_matchparen_hi_background', 0)
calling <SNR>64_init_option('matchup_matchparen_hi_background', 0)

line 1:   if !has_key(g:, a:option)
line 2:     let g:[a:option] = a:default
line 3:   endif
<SNR>64_init_option returning #0

continuing in <SNR>64_init_options

line 24:   call s:init_option('matchup_matchparen_start_sign', '▶')
calling <SNR>64_init_option('matchup_matchparen_start_sign', '▶')

line 1:   if !has_key(g:, a:option)
line 2:     let g:[a:option] = a:default
line 3:   endif
<SNR>64_init_option returning #0

continuing in <SNR>64_init_options

line 25:   call s:init_option('matchup_matchparen_end_sign', '◀')
calling <SNR>64_init_option('matchup_matchparen_end_sign', '◀')

line 1:   if !has_key(g:, a:option)
line 2:     let g:[a:option] = a:default
line 3:   endif
<SNR>64_init_option returning #0

continuing in <SNR>64_init_options

line 26: 
line 27:   call s:init_option('matchup_matchparen_timeout', get(g:, 'matchparen_timeout', 300))
calling <SNR>64_init_option('matchup_matchparen_timeout', 300)

line 1:   if !has_key(g:, a:option)
line 2:     let g:[a:option] = a:default
line 3:   endif
<SNR>64_init_option returning #0

continuing in <SNR>64_init_options

line 29:   call s:init_option('matchup_matchparen_insert_timeout', get(g:, 'matchparen_insert_timeout', 60))
calling <SNR>64_init_option('matchup_matchparen_insert_timeout', 60)

line 1:   if !has_key(g:, a:option)
line 2:     let g:[a:option] = a:default
line 3:   endif
<SNR>64_init_option returning #0

continuing in <SNR>64_init_options

line 31: 
line 32:   call s:init_option('matchup_delim_count_fail', 0)
calling <SNR>64_init_option('matchup_delim_count_fail', 0)

line 1:   if !has_key(g:, a:option)
line 2:     let g:[a:option] = a:default
line 3:   endif
<SNR>64_init_option returning #0

continuing in <SNR>64_init_options

line 33:   call s:init_option('matchup_delim_count_max', 8)
calling <SNR>64_init_option('matchup_delim_count_max', 8)

line 1:   if !has_key(g:, a:option)
line 2:     let g:[a:option] = a:default
line 3:   endif
<SNR>64_init_option returning #0

continuing in <SNR>64_init_options

line 34:   call s:init_option('matchup_delim_start_plaintext', 1)
calling <SNR>64_init_option('matchup_delim_start_plaintext', 1)

line 1:   if !has_key(g:, a:option)
line 2:     let g:[a:option] = a:default
line 3:   endif
<SNR>64_init_option returning #0

continuing in <SNR>64_init_options

line 35:   call s:init_option('matchup_delim_noskips', 0)
calling <SNR>64_init_option('matchup_delim_noskips', 0)

line 1:   if !has_key(g:, a:option)
line 2:     let g:[a:option] = a:default
line 3:   endif
<SNR>64_init_option returning #0

continuing in <SNR>64_init_options

line 36:   call s:init_option('matchup_delim_nomids', 0)
calling <SNR>64_init_option('matchup_delim_nomids', 0)

line 1:   if !has_key(g:, a:option)
line 2:     let g:[a:option] = a:default
line 3:   endif
<SNR>64_init_option returning #0

continuing in <SNR>64_init_options

line 37: 
line 38:   call s:init_option('matchup_motion_enabled', 1)
calling <SNR>64_init_option('matchup_motion_enabled', 1)

line 1:   if !has_key(g:, a:option)
line 2:     let g:[a:option] = a:default
line 3:   endif
<SNR>64_init_option returning #0

continuing in <SNR>64_init_options

line 39:   call s:init_option('matchup_motion_cursor_end', 1)
calling <SNR>64_init_option('matchup_motion_cursor_end', 1)

line 1:   if !has_key(g:, a:option)
line 2:     let g:[a:option] = a:default
line 3:   endif
<SNR>64_init_option returning #0

continuing in <SNR>64_init_options

line 40:   call s:init_option('matchup_motion_override_Npercent', 6)
calling <SNR>64_init_option('matchup_motion_override_Npercent', 6)

line 1:   if !has_key(g:, a:option)
line 2:     let g:[a:option] = a:default
line 3:   endif
<SNR>64_init_option returning #0

continuing in <SNR>64_init_options

line 41:   call s:init_option('matchup_motion_keepjumps', 0)
calling <SNR>64_init_option('matchup_motion_keepjumps', 0)

line 1:   if !has_key(g:, a:option)
line 2:     let g:[a:option] = a:default
line 3:   endif
<SNR>64_init_option returning #0

continuing in <SNR>64_init_options

line 42: 
line 43:   call s:init_option('matchup_text_obj_enabled', 1)
calling <SNR>64_init_option('matchup_text_obj_enabled', 1)

line 1:   if !has_key(g:, a:option)
line 2:     let g:[a:option] = a:default
line 3:   endif
<SNR>64_init_option returning #0

continuing in <SNR>64_init_options

line 44:   call s:init_option('matchup_text_obj_linewise_operators', ['d', 'y'])
calling <SNR>64_init_option('matchup_text_obj_linewise_operators', ['d', 'y'])

line 1:   if !has_key(g:, a:option)
line 2:     let g:[a:option] = a:default
line 3:   endif
<SNR>64_init_option returning #0

continuing in <SNR>64_init_options

line 45: 
line 46:   call s:init_option('matchup_transmute_enabled', 0)
calling <SNR>64_init_option('matchup_transmute_enabled', 0)

line 1:   if !has_key(g:, a:option)
line 2:     let g:[a:option] = a:default
line 3:   endif
<SNR>64_init_option returning #0

continuing in <SNR>64_init_options

line 47:   call s:init_option('matchup_transmute_breakundo', 0)
calling <SNR>64_init_option('matchup_transmute_breakundo', 0)

line 1:   if !has_key(g:, a:option)
line 2:     let g:[a:option] = a:default
line 3:   endif
<SNR>64_init_option returning #0

continuing in <SNR>64_init_options

line 48: 
line 49:   call s:init_option('matchup_mouse_enabled', 1)
calling <SNR>64_init_option('matchup_mouse_enabled', 1)

line 1:   if !has_key(g:, a:option)
line 2:     let g:[a:option] = a:default
line 3:   endif
<SNR>64_init_option returning #0

continuing in <SNR>64_init_options

line 50: 
line 51:   call s:init_option('matchup_surround_enabled', 0)
calling <SNR>64_init_option('matchup_surround_enabled', 0)

line 1:   if !has_key(g:, a:option)
line 2:     let g:[a:option] = a:default
line 3:   endif
<SNR>64_init_option returning #0

continuing in <SNR>64_init_options

line 52: 
line 53:   call s:init_option('matchup_where_enabled', 1)
calling <SNR>64_init_option('matchup_where_enabled', 1)

line 1:   if !has_key(g:, a:option)
line 2:     let g:[a:option] = a:default
line 3:   endif
<SNR>64_init_option returning #0

continuing in <SNR>64_init_options

line 54:   call s:init_option('matchup_where_separator', '')
calling <SNR>64_init_option('matchup_where_separator', '')

line 1:   if !has_key(g:, a:option)
line 2:     let g:[a:option] = a:default
line 3:   endif
<SNR>64_init_option returning #0

continuing in <SNR>64_init_options

line 55: 
line 56:   call s:init_option('matchup_matchpref', {})
calling <SNR>64_init_option('matchup_matchpref', {})

line 1:   if !has_key(g:, a:option)
line 2:     let g:[a:option] = a:default
line 3:   endif
<SNR>64_init_option returning #0

continuing in <SNR>64_init_options

<SNR>64_init_options returning #0

continuing in matchup#init

line 4:   call s:init_modules()
calling <SNR>64_init_modules()

line 1:   for l:mod in [ 'loader', 'matchparen' ]
line 2:     if !get(g:, 'matchup_'.l:mod.'_enabled', 1)
line 3:       continue
line 4:     endif
line 5:     call matchup#perf#tic('loading_module')
calling matchup#perf#tic('loading_module')

line 1:   let s:time_start[a:context] = reltime()
matchup#perf#tic returning #0

continuing in <SNR>64_init_modules

line 6:     call matchup#{l:mod}#init_module()
Searching for "autoload/matchup/loader.vim" in runtime path
Searching for "/home/rachartier/.config/nvim/autoload/matchup/loader.vim"
Searching for "/home/rachartier/.local/share/nvim/site/autoload/matchup/loader.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/lazy.nvim/autoload/matchup/loader.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/vim-matchup/autoload/matchup/loader.vim"
line 6: sourcing "/home/rachartier/.local/share/nvim/lazy/vim-matchup/autoload/matchup/loader.vim"
line 1: " vim match-up - even better matching
line 2: "
line 3: " Maintainer: Andy Massimino
line 4: " Email:      a@normed.space
line 5: "
line 6: 
line 7: let s:save_cpo = &cpo
line 8: set cpo&vim
line 9: 
line 10: function! matchup#loader#init_module() abort " {{{1
line 19: 
line 20: " }}}1
line 21: function! matchup#loader#init_buffer() abort " {{{1
line 90: 
line 91: function! matchup#loader#_treesitter_may_be_supported() abort
line 94: 
line 95: let s:ts_may_be_supported = has('nvim-0.5.0') && exists('*luaeval') && luaeval('pcall(require, "treesitter-matchup")')
line 97: 
line 98: " }}}1
line 99: function! matchup#loader#bufwinenter() abort " {{{1
line 105: 
line 106: " }}}1
line 107: function! matchup#loader#refresh_match_words() abort " {{{1
line 139: 
line 140: let s:match_word_cache = {}
line 141: 
line 142: " }}}1
line 143: 
line 144: function! s:init_delim_lists(no_words, filter_words) abort " {{{1
line 521: 
line 522: " }}}1
line 523: function! s:init_delim_lists_fast(mps) abort " {{{1
line 575: 
line 576: " }}}1
line 577: function! s:init_delim_regexes() abort " {{{1
line 614: 
line 615: " }}}1
line 616: function! s:init_delim_regexes_generator(list_name) abort " {{{1
line 638: 
line 639: " }}}1
line 640: 
line 641: function! matchup#loader#capture_group_replacement_order(cg) abort " {{{1
line 646: 
line 647: function! s:capture_group_sort(a, b) abort dict
line 650: 
line 651: " }}}1
line 652: function! matchup#loader#get_capture_groups(str, ...) abort " {{{1
line 692: 
line 693: " compatibility
line 694: if exists('*matchstrpos')
line 695:   function! s:matchstrpos(expr, pat, start) abort
line 698: else
line 699:   function! s:matchstrpos(expr, pat, start) abort
line 704: endif
line 705: 
line 706: " }}}1
line 707: function! matchup#loader#remove_capture_groups(re) abort "{{{1
line 711: 
line 712: "}}}1
line 713: 
line 714: function! s:init_delim_skip() abort "{{{1
line 746: 
line 747: "}}}1
line 748: 
line 749: function! s:Nsort_func(a, b) abort " {{{1
line 754: 
line 755: " }}}1
line 756: 
line 757: let s:sidedict = { 'open'     : ['open'], 'mid'      : ['mid'], 'close'    : ['close'], 'both'     : ['close', 'open'], 'both_all' : ['close', 'mid', 'open'], 'open_mid' : ['mid', 'open'],}
line 765: 
line 766: function! matchup#loader#sidedict() abort
line 769: 
line 770: " in case the 'N' sort flag is not available (compatibility for 7.4.898)
line 771: let s:Nsort = has('patch-7.4.951') ? 'N' : 's:Nsort_func'
line 772: 
line 773: let &cpo = s:save_cpo
line 774: 
line 775: " vim: fdm=marker sw=2
line 776: 
finished sourcing /home/rachartier/.local/share/nvim/lazy/vim-matchup/autoload/matchup/loader.vim
continuing in <SNR>64_init_modules
calling matchup#loader#init_module()

line 1:   augroup matchup_filetype
line 2:     au!
line 3:     autocmd FileType * call matchup#loader#init_buffer()
line 4:     if g:matchup_delim_start_plaintext
line 5:       autocmd BufWinEnter,CmdWinEnter * call matchup#loader#bufwinenter()
line 6:     endif
line 7:   augroup END
matchup#loader#init_module returning #0

continuing in <SNR>64_init_modules

line 7:     call matchup#perf#toc('loading_module', l:mod)
calling matchup#perf#toc('loading_module', 'loader')

line 1:   let l:elapsed = s:Reltimefloat(reltime(s:time_start[a:context]))
line 2: 
line 3:   let l:key = a:context.'#'.a:state
line 4:   if has_key(g:matchup#perf#times, l:key)
line 5:     if l:elapsed > g:matchup#perf#times[l:key].maximum
line 6:       let g:matchup#perf#times[l:key].maximum = l:elapsed
line 7:     endif
line 8:     let g:matchup#perf#times[l:key].last = l:elapsed
line 9:     let g:matchup#perf#times[l:key].emavg = s:alpha*l:elapsed + (1-s:alpha)*g:matchup#perf#times[l:key].emavg
line 11:   else
line 12:     let g:matchup#perf#times[l:key] = { 'maximum' : l:elapsed, 'emavg'   : l:elapsed, 'last'    : l:elapsed,}
line 17:   endif
matchup#perf#toc returning #0

continuing in <SNR>64_init_modules

line 8:   endfor
line 1:   for l:mod in [ 'loader', 'matchparen' ]
line 2:     if !get(g:, 'matchup_'.l:mod.'_enabled', 1)
line 3:       continue
line 4:     endif
line 5:     call matchup#perf#tic('loading_module')
calling matchup#perf#tic('loading_module')

line 1:   let s:time_start[a:context] = reltime()
matchup#perf#tic returning #0

continuing in <SNR>64_init_modules

line 6:     call matchup#{l:mod}#init_module()
Searching for "autoload/matchup/matchparen.vim" in runtime path
Searching for "/home/rachartier/.config/nvim/autoload/matchup/matchparen.vim"
Searching for "/home/rachartier/.local/share/nvim/site/autoload/matchup/matchparen.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/lazy.nvim/autoload/matchup/matchparen.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/vim-matchup/autoload/matchup/matchparen.vim"
line 6: sourcing "/home/rachartier/.local/share/nvim/lazy/vim-matchup/autoload/matchup/matchparen.vim"
line 1: " vim match-up - even better matching
line 2: "
line 3: " Maintainer: Andy Massimino
line 4: " Email:      a@normed.space
line 5: "
line 6: 
line 7: scriptencoding utf-8
line 8: 
line 9: let s:save_cpo = &cpo
line 10: set cpo&vim
line 11: 
line 12: function! matchup#matchparen#init_module() abort " {{{1
line 20: 
line 21: " }}}1
line 22: 
line 23: function! matchup#matchparen#enable() " {{{1
line 66: 
line 67: " }}}1
line 68: 
line 69: function! s:pi_paren_sid() " {{{1
line 97: 
line 98: let s:pi_paren_sid = -1
line 99: 
line 100: " }}}1
line 101: 
line 102: function! matchup#matchparen#disable() " {{{1
line 107: 
line 108: " }}}1
line 109: function! matchup#matchparen#toggle(...) " {{{1
line 115: 
line 116: " }}}1
line 117: function! matchup#matchparen#reload() " {{{1
line 125: 
line 126: " }}}1
line 127: function! matchup#matchparen#update() " {{{1
line 130: 
line 131: " }}}1
line 132: 
line 133: let s:matchparen = {}
line 134: 
line 135: function! s:matchparen.clear() abort dict " {{{1
line 167: 
line 168: " }}}1
line 169: 
line 170: function! s:timer_callback(win_id, timer_id) abort " {{{1
line 200: 
line 201: " }}}1
line 202: 
line 203: function! s:matchparen.fade(level, pos, token) abort dict " {{{1
line 267: 
line 268: " }}}1
line 269: 
line 270: function! s:fade_timer_callback(win_id, timer_id) abort " {{{1
line 287: 
line 288: " }}}1
line 289: 
line 290: function! s:matchparen.highlight_deferred() abort dict " {{{1
line 326: 
line 327: " }}}1
line 328: 
line 329: function! s:matchparen.highlight(...) abort dict " {{{1
line 498: 
line 499: function s:matchparen.transmute_reset() abort dict
line 504: 
line 505: 
line 506: if has('nvim')
line 507:   function s:pumvisible() abort
line 511: else
line 512:   function s:pumvisible() abort
line 515: endif
line 516: 
line 517: " }}}1
line 518: 
line 519: function! s:do_popup_autocmd_enter(win_context) abort "{{{1
line 525: 
line 526: " }}}1
line 527: function! s:do_popup_autocmd_leave(win_context) abort "{{{1
line 533: 
line 534: " }}}1
line 535: 
line 536: function! s:do_offscreen(current, method) " {{{1
line 564: 
line 565: " }}}1
line 566: function! s:do_offscreen_statusline(offscreen, manual) " {{{1
line 588: 
line 589: " }}}1
line 590: function! s:ensure_match_popup() abort " {{{1
line 618: 
line 619: " }}}1
line 620: function! s:do_offscreen_popup(offscreen) abort " {{{1
line 663: 
line 664: function! s:set_popup_text(lnum, adjust, offscreen) abort
line 709: 
line 710: function! s:set_popup_text_2(lnum, adjust, offscreen) abort
line 774: 
line 775: if !exists('s:prop_cache')
line 776:   let s:prop_cache = {}
line 777: endif
line 778: 
line 779: " }}}1
line 780: 
line 781: function! s:do_offscreen_popup_nvim(offscreen) abort " {{{1
line 865: 
line 866: " }}}1
line 867: function! s:populate_floating_win(offscreen, text_method) abort " {{{1
line 926: 
line 927: " }}}1
line 928: function! s:close_floating_win() " {{{1
line 938: 
line 939: " }}}1
line 940: 
line 941: function! MatchupStatusOffscreen() " {{{1
line 945: 
line 946: " }}}1
line 947: 
line 948: function! matchup#matchparen#highlight_surrounding() abort " {{{1
line 952: 
line 953: " }}}1
line 954: 
line 955: function! s:highlight_surrounding(insertmode, current) " {{{1
line 981: 
line 982: " }}}1
line 983: function! s:highlight_background(corrlist) " {{{1
line 1001: 
line 1002: "}}}1
line 1003: 
line 1004: function! s:format_gutter(lnum, ...) " {{{1
line 1053: 
line 1054: " }}}1
line 1055: function! matchup#matchparen#status_str(offscreen, ...) abort " {{{1
line 1127: 
line 1128: " }}}1
line 1129: 
line 1130: function! s:ensure_scroll_timer() " {{{1
line 1142: 
line 1143: " }}}1
line 1144: function! matchup#matchparen#scroll_callback(tid) abort " {{{1
line 1148: 
line 1149: " }}}1
line 1150: function! matchup#matchparen#scroll_update(lnum) abort " {{{1
line 1157: 
line 1158: " }}}1
line 1159: function! matchup#matchparen#scroll_update_float(lnum, position) abort " {{{1
line 1173: 
line 1174: " }}}1
line 1175: 
line 1176: function! s:add_matches(corrlist, ...) " {{{1
line 1226: 
line 1227: if has('nvim-0.5.0')
line 1228:   let s:ns_id = nvim_create_namespace('vim-matchup')
line 1229: endif
line 1230: 
line 1231: if has('nvim-0.5.0') && matchup#loader#_treesitter_may_be_supported()
calling matchup#loader#_treesitter_may_be_supported()

line 1:   return s:ts_may_be_supported
matchup#loader#_treesitter_may_be_supported returning #1

continuing in /home/rachartier/.local/share/nvim/lazy/vim-matchup/autoload/matchup/matchparen.vim

line 1232:   function s:synID(lnum, col, trans)
line 1235: else
line 1236:   function s:synID(lnum, col, trans)
line 1239: endif
line 1240: 
line 1241: function! s:wordish(delim)
line 1244: 
line 1245: " }}}1
line 1246: function! s:add_background_matches_1(line1, col1, line2, col2) " {{{1
line 1265: 
line 1266: " }}}1
line 1267: 
line 1268: let &cpo = s:save_cpo
line 1269: 
line 1270: " vim: fdm=marker sw=2
finished sourcing /home/rachartier/.local/share/nvim/lazy/vim-matchup/autoload/matchup/matchparen.vim
continuing in <SNR>64_init_modules
calling matchup#matchparen#init_module()

line 1:   if !g:matchup_matchparen_enabled | return | endif
line 1:  return | endif
line 1:  endif
line 2: 
line 3:   call matchup#matchparen#enable()
calling matchup#matchparen#enable()

line 1:   let g:matchup_matchparen_enabled = 1
line 2: 
line 3:   if g:matchup_matchparen_deferred && (!has('timers') || !exists('*timer_pause')     || has('nvim') && !has('nvim-0.2.1'))
line 6:     let g:matchup_matchparen_deferred = 0
line 7:     echohl WarningMsg
line 8:     echom "match-up's deferred highlighting feature is " . 'not supported in your vim version'
line 10:     echohl None
line 11:   endif
line 12: 
line 13:   augroup matchup_matchparen
line 14:     autocmd!
line 15:     autocmd CursorMoved,CursorMovedI * call s:matchparen.highlight_deferred()
line 17:     autocmd WinEnter * call s:matchparen.highlight(1)
line 18:     autocmd TextChanged,TextChangedI * call s:matchparen.highlight_deferred()
line 20:     if has('patch-8.0.1494')
line 21:       autocmd TextChangedP * call s:matchparen.highlight_deferred()
line 22:     endif
line 23:     autocmd BufReadPost * call s:matchparen.transmute_reset()
line 24:     autocmd WinLeave,BufLeave * call s:matchparen.clear()
line 25:     autocmd InsertEnter,InsertChange * call s:matchparen.highlight(1, 1)
line 26:     autocmd InsertLeave * call s:matchparen.highlight(1)
line 27:     if v:version >= 800
line 28:       autocmd OptionSet signcolumn call s:matchparen.highlight(1)
line 29:     endif
line 30:   augroup END
line 31: 
line 32:   if has('vim_starting')
line 33:     " prevent this from autoloading during timer callback at startup
line 34:     if g:matchup_matchparen_deferred
line 35:       call matchup#pos#val(0,0)
line 36:     endif
line 37: 
line 38:     " prevent loading the delim module at vim startup
line 39:     let w:last_changedtick = 2
line 40:     let w:last_cursor = [0,1,1,0,1]
line 41:   endif
matchup#matchparen#enable returning #0

continuing in matchup#matchparen#init_module

line 4: 
line 5:   nnoremap <silent> <plug>(matchup-hi-surround) :<c-u>call matchup#matchparen#highlight_surrounding()<cr>
matchup#matchparen#init_module returning #0

continuing in <SNR>64_init_modules

line 7:     call matchup#perf#toc('loading_module', l:mod)
calling matchup#perf#toc('loading_module', 'matchparen')

line 1:   let l:elapsed = s:Reltimefloat(reltime(s:time_start[a:context]))
line 2: 
line 3:   let l:key = a:context.'#'.a:state
line 4:   if has_key(g:matchup#perf#times, l:key)
line 5:     if l:elapsed > g:matchup#perf#times[l:key].maximum
line 6:       let g:matchup#perf#times[l:key].maximum = l:elapsed
line 7:     endif
line 8:     let g:matchup#perf#times[l:key].last = l:elapsed
line 9:     let g:matchup#perf#times[l:key].emavg = s:alpha*l:elapsed + (1-s:alpha)*g:matchup#perf#times[l:key].emavg
line 11:   else
line 12:     let g:matchup#perf#times[l:key] = { 'maximum' : l:elapsed, 'emavg'   : l:elapsed, 'last'    : l:elapsed,}
line 17:   endif
matchup#perf#toc returning #0

continuing in <SNR>64_init_modules

line 8:   endfor
line 1:   for l:mod in [ 'loader', 'matchparen' ]
line 2:     if !get(g:, 'matchup_'.l:mod.'_enabled', 1)
line 3:       continue
line 4:     endif
line 5:     call matchup#perf#tic('loading_module')
line 6:     call matchup#{l:mod}#init_module()
line 7:     call matchup#perf#toc('loading_module', l:mod)
line 8:   endfor
line 9: 
line 10:   call s:motion_init_module()
calling <SNR>64_motion_init_module()

line 1:   if !g:matchup_motion_enabled | return | endif
line 1:  return | endif
line 1:  endif
line 2: 
line 3:   call matchup#perf#tic('loading_module')
calling matchup#perf#tic('loading_module')

line 1:   let s:time_start[a:context] = reltime()
matchup#perf#tic returning #0

continuing in <SNR>64_motion_init_module

line 4: 
line 5:   " gets the current forced motion type
line 6:   nnoremap <silent><expr> <sid>(wise) empty(g:v_motion_force) ? 'v' : g:v_motion_force
line 8: 
line 9:   " the basic motions % and g%
line 10:   if has('patch-8.2.1978') || has('nvim')
line 11:     nnoremap <silent> <plug>(matchup-%) <cmd>call matchup#motion#find_matching_pair(0, 1)<cr>
line 13:     nnoremap <silent> <plug>(matchup-g%) <cmd>call matchup#motion#find_matching_pair(0, 0)<cr>
line 15:   else
line 16:     nnoremap <silent> <plug>(matchup-%) :<c-u>call matchup#motion#find_matching_pair(0, 1)<cr>
line 18:     nnoremap <silent> <plug>(matchup-g%) :<c-u>call matchup#motion#find_matching_pair(0, 0)<cr>
line 20:   endif
line 21: 
line 22:   " visual and operator-pending
line 23:   xnoremap <silent> <sid>(matchup-%) :<c-u>call matchup#motion#find_matching_pair(1, 1)<cr>
line 25:   xmap     <silent> <plug>(matchup-%) <sid>(matchup-%)
line 26:   onoremap <silent> <plug>(matchup-%) :<c-u>call matchup#motion#op('%')<cr>
line 28: 
line 29:   xnoremap <silent> <sid>(matchup-g%) :<c-u>call matchup#motion#find_matching_pair(1, 0)<cr>
line 31:   xmap     <silent> <plug>(matchup-g%) <sid>(matchup-g%)
line 32:   onoremap <silent> <plug>(matchup-g%) :<c-u>call matchup#motion#op('g%')<cr>
line 34: 
line 35:   " ]% and [%
line 36:   if has('patch-8.2.1978') || has('nvim')
line 37:     nnoremap <silent> <plug>(matchup-]%) <cmd>call matchup#motion#find_unmatched(0, 1)<cr>
line 39:     nnoremap <silent> <plug>(matchup-[%) <cmd>call matchup#motion#find_unmatched(0, 0)<cr>
line 41:   else
line 42:     nnoremap <silent> <plug>(matchup-]%) :<c-u>call matchup#motion#find_unmatched(0, 1)<cr>
line 44:     nnoremap <silent> <plug>(matchup-[%) :<c-u>call matchup#motion#find_unmatched(0, 0)<cr>
line 46:   endif
line 47: 
line 48:   xnoremap <silent> <sid>(matchup-]%) :<c-u>call matchup#motion#find_unmatched(1, 1)<cr>
line 50:   xnoremap <silent> <sid>(matchup-[%) :<c-u>call matchup#motion#find_unmatched(1, 0)<cr>
line 52:   xmap     <plug>(matchup-]%) <sid>(matchup-]%)
line 53:   xmap     <plug>(matchup-[%) <sid>(matchup-[%)
line 54:   onoremap <silent> <plug>(matchup-]%) :<c-u>call matchup#motion#op(']%')<cr>
line 56:   onoremap <silent> <plug>(matchup-[%) :<c-u>call matchup#motion#op('[%')<cr>
line 58: 
line 59:   " jump inside z%
line 60:   if has('patch-8.2.1978') || has('nvim')
line 61:     nnoremap <silent> <plug>(matchup-z%) <cmd>call matchup#motion#jump_inside(0)<cr>
line 63:   else
line 64:     nnoremap <silent> <plug>(matchup-z%) :<c-u>call matchup#motion#jump_inside(0)<cr>
line 66:   endif
line 67: 
line 68:   xnoremap <silent> <sid>(matchup-z%) :<c-u>call matchup#motion#jump_inside(1)<cr>
line 70:   xmap     <silent> <plug>(matchup-z%) <sid>(matchup-z%)
line 71:   onoremap <silent> <plug>(matchup-z%) :<c-u>call matchup#motion#op('z%')<cr>
line 73: 
line 74:   " 'opposite' of z%
line 75:   if has('patch-8.2.1978') || has('nvim')
line 76:     nnoremap <silent> <plug>(matchup-Z%) <cmd>call matchup#motion#jump_inside_prev(0)<cr>
line 78:   else
line 79:     nnoremap <silent> <plug>(matchup-Z%) :<c-u>call matchup#motion#jump_inside_prev(0)<cr>
line 81:   endif
line 82: 
line 83:   xnoremap <silent> <sid>(matchup-Z%) :<c-u>call matchup#motion#jump_inside_prev(1)<cr>
line 85:   xmap     <silent> <plug>(matchup-Z%) <sid>(matchup-Z%)
line 86:   onoremap <silent> <plug>(matchup-Z%) :<c-u>call matchup#motion#op('Z%')<cr>
line 88: 
line 89:   inoremap <silent> <plug>(matchup-c_g%) <c-\><c-o>:call matchup#motion#insert_mode()<cr>
line 91: 
line 92:   call matchup#perf#toc('loading_module', 'motion')
calling matchup#perf#toc('loading_module', 'motion')

line 1:   let l:elapsed = s:Reltimefloat(reltime(s:time_start[a:context]))
line 2: 
line 3:   let l:key = a:context.'#'.a:state
line 4:   if has_key(g:matchup#perf#times, l:key)
line 5:     if l:elapsed > g:matchup#perf#times[l:key].maximum
line 6:       let g:matchup#perf#times[l:key].maximum = l:elapsed
line 7:     endif
line 8:     let g:matchup#perf#times[l:key].last = l:elapsed
line 9:     let g:matchup#perf#times[l:key].emavg = s:alpha*l:elapsed + (1-s:alpha)*g:matchup#perf#times[l:key].emavg
line 11:   else
line 12:     let g:matchup#perf#times[l:key] = { 'maximum' : l:elapsed, 'emavg'   : l:elapsed, 'last'    : l:elapsed,}
line 17:   endif
matchup#perf#toc returning #0

continuing in <SNR>64_motion_init_module

<SNR>64_motion_init_module returning #0

continuing in <SNR>64_init_modules

line 11:   call s:text_obj_init_module()
calling <SNR>64_text_obj_init_module()

line 1:   if !g:matchup_text_obj_enabled | return | endif
line 1:  return | endif
line 1:  endif
line 2: 
line 3:   call matchup#perf#tic('loading_module')
calling matchup#perf#tic('loading_module')

line 1:   let s:time_start[a:context] = reltime()
matchup#perf#tic returning #0

continuing in <SNR>64_text_obj_init_module

line 4: 
line 5:   for [l:map, l:name, l:opt] in [ ['%', 'delimited', 'delim_all'],]
line 8:     let l:p1 = 'noremap <silent> <plug>(matchup-'
line 9:     let l:p2 = l:map . ') :<c-u>call matchup#text_obj#' . l:name
line 10:     let l:p3 = empty(l:opt) ? ')<cr>' : ', ''' . l:opt . ''')<cr>'
line 11:     execute 'x' . l:p1 . 'i' . l:p2 . '(1, 1' . l:p3
line 11: xnoremap <silent> <plug>(matchup-i%) :<c-u>call matchup#text_obj#delimited(1, 1, 'delim_all')<cr>
line 12:     execute 'x' . l:p1 . 'a' . l:p2 . '(0, 1' . l:p3
line 12: xnoremap <silent> <plug>(matchup-a%) :<c-u>call matchup#text_obj#delimited(0, 1, 'delim_all')<cr>
line 13:     execute 'o' . l:p1 . 'i' . l:p2 . '(1, 0' . l:p3
line 13: onoremap <silent> <plug>(matchup-i%) :<c-u>call matchup#text_obj#delimited(1, 0, 'delim_all')<cr>
line 14:     execute 'o' . l:p1 . 'a' . l:p2 . '(0, 0' . l:p3
line 14: onoremap <silent> <plug>(matchup-a%) :<c-u>call matchup#text_obj#delimited(0, 0, 'delim_all')<cr>
line 15:   endfor
line 5:   for [l:map, l:name, l:opt] in [ ['%', 'delimited', 'delim_all'],]
line 8:     let l:p1 = 'noremap <silent> <plug>(matchup-'
line 9:     let l:p2 = l:map . ') :<c-u>call matchup#text_obj#' . l:name
line 10:     let l:p3 = empty(l:opt) ? ')<cr>' : ', ''' . l:opt . ''')<cr>'
line 11:     execute 'x' . l:p1 . 'i' . l:p2 . '(1, 1' . l:p3
line 12:     execute 'x' . l:p1 . 'a' . l:p2 . '(0, 1' . l:p3
line 13:     execute 'o' . l:p1 . 'i' . l:p2 . '(1, 0' . l:p3
line 14:     execute 'o' . l:p1 . 'a' . l:p2 . '(0, 0' . l:p3
line 15:   endfor
line 16: 
line 17:   nnoremap <silent> <plug>(matchup-double-click) :<c-u>call matchup#text_obj#double_click()<cr>
line 19: 
line 20:   call matchup#perf#toc('loading_module', 'motion')
calling matchup#perf#toc('loading_module', 'motion')

line 1:   let l:elapsed = s:Reltimefloat(reltime(s:time_start[a:context]))
line 2: 
line 3:   let l:key = a:context.'#'.a:state
line 4:   if has_key(g:matchup#perf#times, l:key)
line 5:     if l:elapsed > g:matchup#perf#times[l:key].maximum
line 6:       let g:matchup#perf#times[l:key].maximum = l:elapsed
line 7:     endif
line 8:     let g:matchup#perf#times[l:key].last = l:elapsed
line 9:     let g:matchup#perf#times[l:key].emavg = s:alpha*l:elapsed + (1-s:alpha)*g:matchup#perf#times[l:key].emavg
line 11:   else
line 12:     let g:matchup#perf#times[l:key] = { 'maximum' : l:elapsed, 'emavg'   : l:elapsed, 'last'    : l:elapsed,}
line 17:   endif
matchup#perf#toc returning #0

continuing in <SNR>64_text_obj_init_module

<SNR>64_text_obj_init_module returning #0

continuing in <SNR>64_init_modules

line 12:   call s:misc_init_module()
calling <SNR>64_misc_init_module()

line 1:   call matchup#perf#tic('loading_module')
calling matchup#perf#tic('loading_module')

line 1:   let s:time_start[a:context] = reltime()
matchup#perf#tic returning #0

continuing in <SNR>64_misc_init_module

line 2:   command! MatchupReload          call matchup#misc#reload()
line 3:   nnoremap <plug>(matchup-reload) :<c-u>MatchupReload<cr>
line 4:   call matchup#perf#toc('loading_module', 'misc')
calling matchup#perf#toc('loading_module', 'misc')

line 1:   let l:elapsed = s:Reltimefloat(reltime(s:time_start[a:context]))
line 2: 
line 3:   let l:key = a:context.'#'.a:state
line 4:   if has_key(g:matchup#perf#times, l:key)
line 5:     if l:elapsed > g:matchup#perf#times[l:key].maximum
line 6:       let g:matchup#perf#times[l:key].maximum = l:elapsed
line 7:     endif
line 8:     let g:matchup#perf#times[l:key].last = l:elapsed
line 9:     let g:matchup#perf#times[l:key].emavg = s:alpha*l:elapsed + (1-s:alpha)*g:matchup#perf#times[l:key].emavg
line 11:   else
line 12:     let g:matchup#perf#times[l:key] = { 'maximum' : l:elapsed, 'emavg'   : l:elapsed, 'last'    : l:elapsed,}
line 17:   endif
matchup#perf#toc returning #0

continuing in <SNR>64_misc_init_module

<SNR>64_misc_init_module returning #0

continuing in <SNR>64_init_modules

line 13:   call s:surround_init_module()
calling <SNR>64_surround_init_module()

line 1:   if !g:matchup_surround_enabled | return | endif
line 1:  return | endif
<SNR>64_surround_init_module returning #0

continuing in <SNR>64_init_modules

line 14:   call s:where_init_module()
calling <SNR>64_where_init_module()

line 1:   if !g:matchup_where_enabled | return | endif
line 1:  return | endif
line 1:  endif
line 2: 
line 3:   command! -nargs=? -bang MatchupWhereAmI call matchup#where#print('<bang>' . <q-args>)
<SNR>64_where_init_module returning #0

continuing in <SNR>64_init_modules

line 15:   call s:treesitter_init_module()
calling <SNR>64_treesitter_init_module()

line 1:   if !matchup#loader#_treesitter_may_be_supported()
calling matchup#loader#_treesitter_may_be_supported()

line 1:   return s:ts_may_be_supported
matchup#loader#_treesitter_may_be_supported returning #1

continuing in <SNR>64_treesitter_init_module

line 2:     return
line 3:   endif
line 4: 
line 5:   lua require'treesitter-matchup'.init()
line 6: 
line 7:   augroup matchup_filetype_query
line 8:     au!
line 9:     autocmd FileType query augroup MatchupTreesitter|augroup END|autocmd! MatchupTreesitter BufWritePost <buffer> call v:lua.require('treesitter-matchup.third-party.query').invalidate_query_file(expand('%:p'))
line 14:   augroup END
<SNR>64_treesitter_init_module returning #0

continuing in <SNR>64_init_modules

<SNR>64_init_modules returning #0

continuing in matchup#init

line 5:   call s:init_default_mappings()
calling <SNR>64_init_default_mappings()

line 1:   if !get(g:,'matchup_mappings_enabled', 1) | return | endif
line 1:  return | endif
line 1:  endif
line 2: 
line 3:   function! s:map(mode, lhs, rhs, ...)
line 9: 
line 10:   function! s:omap(mode, lhs, rhs, ...)  " issues/199
line 16: 
line 17:   if s:old_style_ops
line 18:     call s:init_oldstyle_ops()
line 19:   endif
line 20: 
line 21:   " these won't conflict since matchit should not be loaded at this point
line 22:   if get(g:, 'matchup_motion_enabled', 0)
line 23:     call s:map('n', '%',  '<plug>(matchup-%)' )
calling <SNR>64_map('n', '%', '<plug>(matchup-%)')

line 1:     if !hasmapto(a:rhs, a:mode) && ((a:0 > 0) || (maparg(a:lhs, a:mode) ==# ''))
line 2:       silent execute a:mode . 'map <silent> ' a:lhs a:rhs
line 2: nmap <silent>  % <plug>(matchup-%)
line 3:     endif
<SNR>64_map returning #0

continuing in <SNR>64_init_default_mappings

line 24:     call s:map('n', 'g%', '<plug>(matchup-g%)')
calling <SNR>64_map('n', 'g%', '<plug>(matchup-g%)')

line 1:     if !hasmapto(a:rhs, a:mode) && ((a:0 > 0) || (maparg(a:lhs, a:mode) ==# ''))
line 2:       silent execute a:mode . 'map <silent> ' a:lhs a:rhs
line 2: nmap <silent>  g% <plug>(matchup-g%)
line 3:     endif
<SNR>64_map returning #0

continuing in <SNR>64_init_default_mappings

line 25: 
line 26:     call s:map('x', '%',  '<plug>(matchup-%)' )
calling <SNR>64_map('x', '%', '<plug>(matchup-%)')

line 1:     if !hasmapto(a:rhs, a:mode) && ((a:0 > 0) || (maparg(a:lhs, a:mode) ==# ''))
line 2:       silent execute a:mode . 'map <silent> ' a:lhs a:rhs
line 2: xmap <silent>  % <plug>(matchup-%)
line 3:     endif
<SNR>64_map returning #0

continuing in <SNR>64_init_default_mappings

line 27:     call s:map('x', 'g%', '<plug>(matchup-g%)')
calling <SNR>64_map('x', 'g%', '<plug>(matchup-g%)')

line 1:     if !hasmapto(a:rhs, a:mode) && ((a:0 > 0) || (maparg(a:lhs, a:mode) ==# ''))
line 2:       silent execute a:mode . 'map <silent> ' a:lhs a:rhs
line 2: xmap <silent>  g% <plug>(matchup-g%)
line 3:     endif
<SNR>64_map returning #0

continuing in <SNR>64_init_default_mappings

line 28: 
line 29:     call s:map('n', ']%', '<plug>(matchup-]%)')
calling <SNR>64_map('n', ']%', '<plug>(matchup-]%)')

line 1:     if !hasmapto(a:rhs, a:mode) && ((a:0 > 0) || (maparg(a:lhs, a:mode) ==# ''))
line 2:       silent execute a:mode . 'map <silent> ' a:lhs a:rhs
line 2: nmap <silent>  ]% <plug>(matchup-]%)
line 3:     endif
<SNR>64_map returning #0

continuing in <SNR>64_init_default_mappings

line 30:     call s:map('n', '[%', '<plug>(matchup-[%)')
calling <SNR>64_map('n', '[%', '<plug>(matchup-[%)')

line 1:     if !hasmapto(a:rhs, a:mode) && ((a:0 > 0) || (maparg(a:lhs, a:mode) ==# ''))
line 2:       silent execute a:mode . 'map <silent> ' a:lhs a:rhs
line 2: nmap <silent>  [% <plug>(matchup-[%)
line 3:     endif
<SNR>64_map returning #0

continuing in <SNR>64_init_default_mappings

line 31: 
line 32:     call s:map('x', ']%', '<plug>(matchup-]%)')
calling <SNR>64_map('x', ']%', '<plug>(matchup-]%)')

line 1:     if !hasmapto(a:rhs, a:mode) && ((a:0 > 0) || (maparg(a:lhs, a:mode) ==# ''))
line 2:       silent execute a:mode . 'map <silent> ' a:lhs a:rhs
line 2: xmap <silent>  ]% <plug>(matchup-]%)
line 3:     endif
<SNR>64_map returning #0

continuing in <SNR>64_init_default_mappings

line 33:     call s:map('x', '[%', '<plug>(matchup-[%)')
calling <SNR>64_map('x', '[%', '<plug>(matchup-[%)')

line 1:     if !hasmapto(a:rhs, a:mode) && ((a:0 > 0) || (maparg(a:lhs, a:mode) ==# ''))
line 2:       silent execute a:mode . 'map <silent> ' a:lhs a:rhs
line 2: xmap <silent>  [% <plug>(matchup-[%)
line 3:     endif
<SNR>64_map returning #0

continuing in <SNR>64_init_default_mappings

line 34: 
line 35:     call s:map('n', 'z%', '<plug>(matchup-z%)')
calling <SNR>64_map('n', 'z%', '<plug>(matchup-z%)')

line 1:     if !hasmapto(a:rhs, a:mode) && ((a:0 > 0) || (maparg(a:lhs, a:mode) ==# ''))
line 2:       silent execute a:mode . 'map <silent> ' a:lhs a:rhs
line 2: nmap <silent>  z% <plug>(matchup-z%)
line 3:     endif
<SNR>64_map returning #0

continuing in <SNR>64_init_default_mappings

line 36:     call s:map('x', 'z%', '<plug>(matchup-z%)')
calling <SNR>64_map('x', 'z%', '<plug>(matchup-z%)')

line 1:     if !hasmapto(a:rhs, a:mode) && ((a:0 > 0) || (maparg(a:lhs, a:mode) ==# ''))
line 2:       silent execute a:mode . 'map <silent> ' a:lhs a:rhs
line 2: xmap <silent>  z% <plug>(matchup-z%)
line 3:     endif
<SNR>64_map returning #0

continuing in <SNR>64_init_default_mappings

line 37: 
line 38:     if !s:old_style_ops
line 39:       call s:omap('o', '%', '<plug>(matchup-%)')
calling <SNR>64_omap('o', '%', '<plug>(matchup-%)')

line 1:     if !hasmapto(a:rhs, a:mode) && ((a:0 > 0) || (maparg(a:lhs, a:mode) ==# ''))
line 2:       silent execute a:mode . 'map <silent> ' a:lhs s:ignore_key . a:rhs
line 2: omap <silent>  % <ignore><plug>(matchup-%)
line 3:     endif
<SNR>64_omap returning #0

continuing in <SNR>64_init_default_mappings

line 40:       call s:omap('o', 'g%', '<plug>(matchup-g%)')
calling <SNR>64_omap('o', 'g%', '<plug>(matchup-g%)')

line 1:     if !hasmapto(a:rhs, a:mode) && ((a:0 > 0) || (maparg(a:lhs, a:mode) ==# ''))
line 2:       silent execute a:mode . 'map <silent> ' a:lhs s:ignore_key . a:rhs
line 2: omap <silent>  g% <ignore><plug>(matchup-g%)
line 3:     endif
<SNR>64_omap returning #0

continuing in <SNR>64_init_default_mappings

line 41:       call s:map('o', ']%', '<plug>(matchup-]%)')
calling <SNR>64_map('o', ']%', '<plug>(matchup-]%)')

line 1:     if !hasmapto(a:rhs, a:mode) && ((a:0 > 0) || (maparg(a:lhs, a:mode) ==# ''))
line 2:       silent execute a:mode . 'map <silent> ' a:lhs a:rhs
line 2: omap <silent>  ]% <plug>(matchup-]%)
line 3:     endif
<SNR>64_map returning #0

continuing in <SNR>64_init_default_mappings

line 42:       call s:map('o', '[%', '<plug>(matchup-[%)')
calling <SNR>64_map('o', '[%', '<plug>(matchup-[%)')

line 1:     if !hasmapto(a:rhs, a:mode) && ((a:0 > 0) || (maparg(a:lhs, a:mode) ==# ''))
line 2:       silent execute a:mode . 'map <silent> ' a:lhs a:rhs
line 2: omap <silent>  [% <plug>(matchup-[%)
line 3:     endif
<SNR>64_map returning #0

continuing in <SNR>64_init_default_mappings

line 43:       call s:map('o', 'z%', '<plug>(matchup-z%)')
calling <SNR>64_map('o', 'z%', '<plug>(matchup-z%)')

line 1:     if !hasmapto(a:rhs, a:mode) && ((a:0 > 0) || (maparg(a:lhs, a:mode) ==# ''))
line 2:       silent execute a:mode . 'map <silent> ' a:lhs a:rhs
line 2: omap <silent>  z% <plug>(matchup-z%)
line 3:     endif
<SNR>64_map returning #0

continuing in <SNR>64_init_default_mappings

line 44:     endif
line 45: 
line 46:     call s:map('i', '<c-g>%', '<plug>(matchup-c_g%)')
calling <SNR>64_map('i', '<c-g>%', '<plug>(matchup-c_g%)')

line 1:     if !hasmapto(a:rhs, a:mode) && ((a:0 > 0) || (maparg(a:lhs, a:mode) ==# ''))
line 2:       silent execute a:mode . 'map <silent> ' a:lhs a:rhs
line 2: imap <silent>  <c-g>% <plug>(matchup-c_g%)
line 3:     endif
<SNR>64_map returning #0

continuing in <SNR>64_init_default_mappings

line 47:   endif
line 48: 
line 49:   if get(g:, 'matchup_text_obj_enabled', 0)
line 50:     call s:map('x', 'i%', '<plug>(matchup-i%)')
calling <SNR>64_map('x', 'i%', '<plug>(matchup-i%)')

line 1:     if !hasmapto(a:rhs, a:mode) && ((a:0 > 0) || (maparg(a:lhs, a:mode) ==# ''))
line 2:       silent execute a:mode . 'map <silent> ' a:lhs a:rhs
line 2: xmap <silent>  i% <plug>(matchup-i%)
line 3:     endif
<SNR>64_map returning #0

continuing in <SNR>64_init_default_mappings

line 51:     call s:map('x', 'a%', '<plug>(matchup-a%)')
calling <SNR>64_map('x', 'a%', '<plug>(matchup-a%)')

line 1:     if !hasmapto(a:rhs, a:mode) && ((a:0 > 0) || (maparg(a:lhs, a:mode) ==# ''))
line 2:       silent execute a:mode . 'map <silent> ' a:lhs a:rhs
line 2: xmap <silent>  a% <plug>(matchup-a%)
line 3:     endif
<SNR>64_map returning #0

continuing in <SNR>64_init_default_mappings

line 52: 
line 53:     if !s:old_style_ops
line 54:       call s:map('o', 'i%', '<plug>(matchup-i%)')
calling <SNR>64_map('o', 'i%', '<plug>(matchup-i%)')

line 1:     if !hasmapto(a:rhs, a:mode) && ((a:0 > 0) || (maparg(a:lhs, a:mode) ==# ''))
line 2:       silent execute a:mode . 'map <silent> ' a:lhs a:rhs
line 2: omap <silent>  i% <plug>(matchup-i%)
line 3:     endif
<SNR>64_map returning #0

continuing in <SNR>64_init_default_mappings

line 55:       call s:map('o', 'a%', '<plug>(matchup-a%)')
calling <SNR>64_map('o', 'a%', '<plug>(matchup-a%)')

line 1:     if !hasmapto(a:rhs, a:mode) && ((a:0 > 0) || (maparg(a:lhs, a:mode) ==# ''))
line 2:       silent execute a:mode . 'map <silent> ' a:lhs a:rhs
line 2: omap <silent>  a% <plug>(matchup-a%)
line 3:     endif
<SNR>64_map returning #0

continuing in <SNR>64_init_default_mappings

line 56:     endif
line 57:   endif
line 58: 
line 59:   if get(g:, 'matchup_mouse_enabled', 1)
line 60:     call s:map('n', '<2-LeftMouse>', '<plug>(matchup-double-click)')
calling <SNR>64_map('n', '<2-LeftMouse>', '<plug>(matchup-double-click)')

line 1:     if !hasmapto(a:rhs, a:mode) && ((a:0 > 0) || (maparg(a:lhs, a:mode) ==# ''))
line 2:       silent execute a:mode . 'map <silent> ' a:lhs a:rhs
line 2: nmap <silent>  <2-LeftMouse> <plug>(matchup-double-click)
line 3:     endif
<SNR>64_map returning #0

continuing in <SNR>64_init_default_mappings

line 61:   endif
line 62: 
line 63:   if get(g:, 'matchup_surround_enabled', 0)
line 64:     call s:map('n', 'ds%', '<plug>(matchup-ds%)')
line 65:     call s:map('n', 'cs%', '<plug>(matchup-cs%)')
line 66:   endif
<SNR>64_init_default_mappings returning #0

continuing in matchup#init

line 6: 
line 7:   call matchup#perf#toc('loading', 'init_done')
calling matchup#perf#toc('loading', 'init_done')

line 1:   let l:elapsed = s:Reltimefloat(reltime(s:time_start[a:context]))
line 2: 
line 3:   let l:key = a:context.'#'.a:state
line 4:   if has_key(g:matchup#perf#times, l:key)
line 5:     if l:elapsed > g:matchup#perf#times[l:key].maximum
line 6:       let g:matchup#perf#times[l:key].maximum = l:elapsed
line 7:     endif
line 8:     let g:matchup#perf#times[l:key].last = l:elapsed
line 9:     let g:matchup#perf#times[l:key].emavg = s:alpha*l:elapsed + (1-s:alpha)*g:matchup#perf#times[l:key].emavg
line 11:   else
line 12:     let g:matchup#perf#times[l:key] = { 'maximum' : l:elapsed, 'emavg'   : l:elapsed, 'last'    : l:elapsed,}
line 17:   endif
matchup#perf#toc returning #0

continuing in matchup#init

matchup#init returning #0

continuing in /home/rachartier/.local/share/nvim/lazy/vim-matchup/plugin/matchup.vim

line 55: 
line 56: " vim: fdm=marker sw=2
line 57: 
finished sourcing /home/rachartier/.local/share/nvim/lazy/vim-matchup/plugin/matchup.vim
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup filetypedetect
Executing: augroup END
Executing: source /home/rachartier/.local/share/nvim/lazy/nvim-scissors/plugin/user-commands.lua
line 0: sourcing "/home/rachartier/.local/share/nvim/lazy/nvim-scissors/plugin/user-commands.lua"
finished sourcing /home/rachartier/.local/share/nvim/lazy/nvim-scissors/plugin/user-commands.lua
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup filetypedetect
Executing: augroup END
Executing: source /home/rachartier/.local/share/nvim/lazy/plenary.nvim/plugin/plenary.vim
line 0: sourcing "/home/rachartier/.local/share/nvim/lazy/plenary.nvim/plugin/plenary.vim"
line 1: 
line 2: " Create command for running busted
line 3: command! -nargs=1 -complete=file PlenaryBustedFile lua require('plenary.test_harness').test_file([[<args>]])
line 5: 
line 6: command! -nargs=+ -complete=file PlenaryBustedDirectory lua require('plenary.test_harness').test_directory_command([[<args>]])
line 8: 
line 9: nnoremap <Plug>PlenaryTestFile :lua require('plenary.test_harness').test_file(vim.fn.expand("%:p"))<CR>
finished sourcing /home/rachartier/.local/share/nvim/lazy/plenary.nvim/plugin/plenary.vim
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup filetypedetect
Executing: augroup END
Executing: source /home/rachartier/.local/share/nvim/lazy/telescope.nvim/plugin/telescope.lua
line 0: sourcing "/home/rachartier/.local/share/nvim/lazy/telescope.nvim/plugin/telescope.lua"
finished sourcing /home/rachartier/.local/share/nvim/lazy/telescope.nvim/plugin/telescope.lua
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup filetypedetect
Executing: augroup END
Executing: ls t
Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup filetypedetect
Executing: augroup END
Executing:             if !exists("tmux_autocommands_loaded")
Executing:                 let tmux_autocommands_loaded = 1
Executing:                 let PostYank = luaeval('require("tmux").post_yank')
Executing:                 let SyncRegisters = luaeval('require("tmux").sync_registers')
Executing:                 autocmd TextYankPost * call PostYank(v:event)
Executing:                 autocmd CmdlineEnter * call SyncRegisters()
Executing:                 autocmd CmdwinEnter : call SyncRegisters()
Executing:                 autocmd VimEnter * call SyncRegisters()
Executing:             endif
Executing:         
Executing: augroup filetypedetect
Executing: augroup END
Executing: source /home/rachartier/.local/share/nvim/lazy/which-key.nvim/plugin/which-key.lua
line 0: sourcing "/home/rachartier/.local/share/nvim/lazy/which-key.nvim/plugin/which-key.lua"
finished sourcing /home/rachartier/.local/share/nvim/lazy/which-key.nvim/plugin/which-key.lua
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup filetypedetect
Executing: augroup END
Executing: source /home/rachartier/.local/share/nvim/lazy/todo-comments.nvim/plugin/todo.vim
line 0: sourcing "/home/rachartier/.local/share/nvim/lazy/todo-comments.nvim/plugin/todo.vim"
line 1: command! -nargs=* TodoQuickFix lua require("todo-comments.search").setqflist(<q-args>)
line 2: command! -nargs=* TodoLocList lua require("todo-comments.search").setloclist(<q-args>)
line 3: command! -nargs=* TodoTelescope Telescope todo-comments todo <args>
line 4: command! -nargs=* TodoFzfLua lua require("todo-comments.fzf").todo() <args>
line 5: command! -nargs=* TodoTrouble Trouble todo <args>
finished sourcing /home/rachartier/.local/share/nvim/lazy/todo-comments.nvim/plugin/todo.vim
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup filetypedetect
Executing: augroup END
Executing: hi def TodoBgTODO guibg=#91d7e3 guifg=#24273a gui=BOLD
Executing: hi def TodoFgTODO guibg=NONE guifg=#91d7e3 gui=NONE
Executing: hi def TodoSignTODO guibg=NONE guifg=#91d7e3 gui=NONE
Executing: hi def TodoBgWARN guibg=#eed49f guifg=#24273a gui=BOLD
Executing: hi def TodoFgWARN guibg=NONE guifg=#eed49f gui=NONE
Executing: hi def TodoSignWARN guibg=NONE guifg=#eed49f gui=NONE
Executing: hi def TodoBgFIX guibg=#ed8796 guifg=#24273a gui=BOLD
Executing: hi def TodoFgFIX guibg=NONE guifg=#ed8796 gui=NONE
Executing: hi def TodoSignFIX guibg=NONE guifg=#ed8796 gui=NONE
Executing: hi def TodoBgTEST guibg=#f0c6c6 guifg=#24273a gui=BOLD
Executing: hi def TodoFgTEST guibg=NONE guifg=#f0c6c6 gui=NONE
Executing: hi def TodoSignTEST guibg=NONE guifg=#f0c6c6 gui=NONE
Executing: hi def TodoBgNOTE guibg=#8bd5ca guifg=#24273a gui=BOLD
Executing: hi def TodoFgNOTE guibg=NONE guifg=#8bd5ca gui=NONE
Executing: hi def TodoSignNOTE guibg=NONE guifg=#8bd5ca gui=NONE
Executing: hi def TodoBgHACK guibg=#eed49f guifg=#24273a gui=BOLD
Executing: hi def TodoFgHACK guibg=NONE guifg=#eed49f gui=NONE
Executing: hi def TodoSignHACK guibg=NONE guifg=#eed49f gui=NONE
Executing: hi def TodoBgPERF guibg=#f0c6c6 guifg=#24273a gui=BOLD
Executing: hi def TodoFgPERF guibg=NONE guifg=#f0c6c6 gui=NONE
Executing: hi def TodoSignPERF guibg=NONE guifg=#f0c6c6 gui=NONE
Executing: augroup Todo
Executing:         autocmd!
Executing:         autocmd BufWinEnter,WinNew * lua require("todo-comments.highlight").attach()
Executing:         autocmd WinScrolled * lua require("todo-comments.highlight").highlight_win()
Executing:         autocmd ColorScheme * lua vim.defer_fn(require("todo-comments.config").colors, 10)
Executing:       augroup end
Executing: augroup filetypedetect
Executing: augroup END
Executing: source /home/rachartier/.local/share/nvim/lazy/dressing.nvim/plugin/dressing.lua
line 0: sourcing "/home/rachartier/.local/share/nvim/lazy/dressing.nvim/plugin/dressing.lua"
finished sourcing /home/rachartier/.local/share/nvim/lazy/dressing.nvim/plugin/dressing.lua
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup filetypedetect
Executing: augroup END
Executing: source /home/rachartier/.local/share/nvim/lazy/copilot.lua/plugin/copilot.lua
line 0: sourcing "/home/rachartier/.local/share/nvim/lazy/copilot.lua/plugin/copilot.lua"
finished sourcing /home/rachartier/.local/share/nvim/lazy/copilot.lua/plugin/copilot.lua
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup filetypedetect
Executing: augroup END
Executing: highlight default link CopilotSuggestion Comment
Executing: highlight default link CopilotAnnotation Comment
Searching for "copilot/index.js" in runtime path
Searching for "/home/rachartier/.config/nvim/copilot/index.js"
Searching for "/home/rachartier/.local/share/nvim/site/copilot/index.js"
Searching for "/home/rachartier/.local/share/nvim/lazy/lazy.nvim/copilot/index.js"
Searching for "/home/rachartier/.local/share/nvim/lazy/copilot.lua/copilot/index.js"
Executing: augroup filetypedetect
Executing: augroup END
Executing: source /home/rachartier/.local/share/nvim/lazy/avante.nvim/plugin/avante.lua
line 0: sourcing "/home/rachartier/.local/share/nvim/lazy/avante.nvim/plugin/avante.lua"
finished sourcing /home/rachartier/.local/share/nvim/lazy/avante.nvim/plugin/avante.lua
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup filetypedetect
Executing: augroup END
Executing command: "print -N >/tmp/nvim.rachartier/flj5zx/0 $XDG_CONFIG_HOME"

Executing: source /home/rachartier/.local/share/nvim/lazy/fwatch.nvim/plugin/fwatch.vim
line 0: sourcing "/home/rachartier/.local/share/nvim/lazy/fwatch.nvim/plugin/fwatch.vim"
finished sourcing /home/rachartier/.local/share/nvim/lazy/fwatch.nvim/plugin/fwatch.vim
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup filetypedetect
Executing: augroup END
Executing: augroup lualine | exe "autocmd!" | augroup END
Executing:  exe "autocmd!" | augroup END
Executing: autocmd!
Executing:  augroup END
Searching for "lua/lualine/themes/auto.lua" in runtime path
Searching for "/home/rachartier/.config/nvim/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/site/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/lazy.nvim/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/copilot-lualine/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/lualine.nvim/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/debugprint.nvim/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/mini.hipatterns/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/mini.align/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/fwatch.nvim/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/mini.icons/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/copilot.lua/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-nio/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/dressing.nvim/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/avante.nvim/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/todo-comments.nvim/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/git-conflict.nvim/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/which-key.nvim/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/tiny-inline-diagnostic.nvim/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/tmux.nvim/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/mini.surround/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/gitsigns.nvim/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/telescope-fzf-native.nvim/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/plenary.nvim/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/telescope.nvim/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/tiny-buffers-switcher.nvim/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-scissors/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/vim-matchup/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/Comment.nvim/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/quicker.nvim/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/mini.indentscope/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-treesitter-textobjects/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/playground/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-treesitter/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/edgy.nvim/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/mini.cursorword/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/nui.nvim/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/noice.nvim/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-dap-python/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-emoji/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-git/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.compat/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/LuaSnip/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/friendly-snippets/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.cmp/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/alpha-nvim/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/vim-cool/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/lua/lualine/themes/auto.lua"
Searching for "/tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/lua/lualine/themes/auto.lua"
Searching for "/tmp/.mount_nvimAfSSiL/usr/lib/nvim/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/vim-matchup/after/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/playground/after/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-emoji/after/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/after/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/after/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.config/nvim/after/lua/lualine/themes/auto.lua"
Searching for "/home/rachartier/.local/state/nvim/lazy/readme/lua/lualine/themes/auto.lua"
Searching for "lua/lualine/themes/catppuccin-macchiato.lua" in runtime path
Searching for "/home/rachartier/.config/nvim/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/site/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/lazy.nvim/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/copilot-lualine/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/lualine.nvim/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/debugprint.nvim/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/mini.hipatterns/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/mini.align/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/fwatch.nvim/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/mini.icons/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/copilot.lua/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-nio/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/dressing.nvim/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/avante.nvim/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/todo-comments.nvim/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/git-conflict.nvim/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/which-key.nvim/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/tiny-inline-diagnostic.nvim/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/tmux.nvim/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/mini.surround/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/gitsigns.nvim/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/telescope-fzf-native.nvim/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/plenary.nvim/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/telescope.nvim/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/tiny-buffers-switcher.nvim/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-scissors/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/vim-matchup/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/Comment.nvim/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/quicker.nvim/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/mini.indentscope/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-treesitter-textobjects/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/playground/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-treesitter/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/edgy.nvim/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/mini.cursorword/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/nui.nvim/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/noice.nvim/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-dap-python/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-emoji/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-git/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.compat/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/LuaSnip/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/friendly-snippets/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.cmp/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/alpha-nvim/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/vim-cool/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/tmp/.mount_nvimAfSSiL/usr/lib/nvim/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/vim-matchup/after/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/playground/after/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-emoji/after/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/after/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/after/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.config/nvim/after/lua/lualine/themes/catppuccin-macchiato.lua"
Searching for "/home/rachartier/.local/state/nvim/lazy/readme/lua/lualine/themes/catppuccin-macchiato.lua"
Executing: highlight! lualine_b_normal guifg=#8aadf4 guibg=#363a4f gui=None
Executing: highlight! lualine_a_normal guifg=#1e2030 guibg=#8aadf4 gui=bold
Executing: highlight! lualine_c_normal guifg=#cad3f5 guibg=#1e2030 gui=None
Executing: highlight! lualine_a_terminal guifg=#24273a guibg=#a6da95 gui=bold
Executing: highlight! lualine_b_terminal guifg=#a6da95 guibg=#363a4f gui=None
Executing: highlight! lualine_a_replace guifg=#24273a guibg=#ed8796 gui=bold
Executing: highlight! lualine_b_replace guifg=#ed8796 guibg=#363a4f gui=None
Executing: highlight! lualine_b_inactive guifg=#494d64 guibg=#1e2030 gui=bold
Executing: highlight! lualine_a_inactive guifg=#8aadf4 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_inactive guifg=#6e738d guibg=#1e2030 gui=None
Executing: highlight! lualine_a_insert guifg=#24273a guibg=#a6da95 gui=bold
Executing: highlight! lualine_b_insert guifg=#a6da95 guibg=#363a4f gui=None
Executing: highlight! lualine_a_command guifg=#24273a guibg=#f5a97f gui=bold
Executing: highlight! lualine_b_command guifg=#f5a97f guibg=#363a4f gui=None
Executing: highlight! lualine_a_visual guifg=#24273a guibg=#c6a0f6 gui=bold
Executing: highlight! lualine_b_visual guifg=#c6a0f6 guibg=#363a4f gui=None
Executing: autocmd lualine ColorScheme * lua require'lualine'.setup()
Executing:     autocmd lualine OptionSet background lua require'lualine'.setup()
Executing: highlight! lualine_c_2_normal guifg=#8087a2 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_2_insert guifg=#8087a2 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_2_visual guifg=#8087a2 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_2_replace guifg=#8087a2 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_2_command guifg=#8087a2 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_2_terminal guifg=#8087a2 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_2_inactive guifg=#8087a2 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_error_normal guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_error_insert guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_error_visual guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_error_replace guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_error_command guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_error_terminal guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_error_inactive guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_warn_normal guifg=#eed49f guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_warn_insert guifg=#eed49f guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_warn_visual guifg=#eed49f guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_warn_replace guifg=#eed49f guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_warn_command guifg=#eed49f guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_warn_terminal guifg=#eed49f guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_warn_inactive guifg=#eed49f guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_info_normal guifg=#91d7e3 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_info_insert guifg=#91d7e3 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_info_visual guifg=#91d7e3 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_info_replace guifg=#91d7e3 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_info_command guifg=#91d7e3 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_info_terminal guifg=#91d7e3 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_info_inactive guifg=#91d7e3 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_hint_normal guifg=#8bd5ca guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_hint_insert guifg=#8bd5ca guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_hint_visual guifg=#8bd5ca guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_hint_replace guifg=#8bd5ca guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_hint_command guifg=#8bd5ca guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_hint_terminal guifg=#8bd5ca guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_hint_inactive guifg=#8bd5ca guibg=#1e2030 gui=None
Executing: highlight! lualine_x_5_normal guifg=#a6da95 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_5_insert guifg=#a6da95 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_5_visual guifg=#a6da95 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_5_replace guifg=#a6da95 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_5_command guifg=#a6da95 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_5_terminal guifg=#a6da95 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_5_inactive guifg=#a6da95 guibg=#1e2030 gui=None
Searching for "lua/lualine/components/copilot.lua" in runtime path
Searching for "/home/rachartier/.config/nvim/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/site/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/lazy.nvim/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/copilot-lualine/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/lualine.nvim/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/debugprint.nvim/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/mini.hipatterns/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/mini.align/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/fwatch.nvim/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/mini.icons/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/copilot.lua/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-nio/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/dressing.nvim/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/avante.nvim/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/todo-comments.nvim/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/git-conflict.nvim/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/which-key.nvim/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/tiny-inline-diagnostic.nvim/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/tmux.nvim/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/mini.surround/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/gitsigns.nvim/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/telescope-fzf-native.nvim/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/plenary.nvim/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/telescope.nvim/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/tiny-buffers-switcher.nvim/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-scissors/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/vim-matchup/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/Comment.nvim/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/quicker.nvim/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/mini.indentscope/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-treesitter-textobjects/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/playground/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-treesitter/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/edgy.nvim/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/mini.cursorword/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/nui.nvim/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/noice.nvim/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-dap-python/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-emoji/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-git/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.compat/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/LuaSnip/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/friendly-snippets/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/blink.cmp/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/alpha-nvim/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/vim-cool/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/lua/lualine/components/copilot.lua"
Searching for "/tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/lua/lualine/components/copilot.lua"
Searching for "/tmp/.mount_nvimAfSSiL/usr/lib/nvim/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/vim-matchup/after/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/playground/after/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-emoji/after/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/cmp-nerdfont/after/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim/after/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.config/nvim/after/lua/lualine/components/copilot.lua"
Searching for "/home/rachartier/.local/state/nvim/lazy/readme/lua/lualine/components/copilot.lua"
Executing: highlight! lualine_x_copilot_sleep_normal guifg=#a5adcb guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_sleep_insert guifg=#a5adcb guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_sleep_visual guifg=#a5adcb guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_sleep_replace guifg=#a5adcb guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_sleep_command guifg=#a5adcb guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_sleep_terminal guifg=#a5adcb guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_sleep_inactive guifg=#a5adcb guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_enabled_normal guifg=#a6da95 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_enabled_insert guifg=#a6da95 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_enabled_visual guifg=#a6da95 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_enabled_replace guifg=#a6da95 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_enabled_command guifg=#a6da95 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_enabled_terminal guifg=#a6da95 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_enabled_inactive guifg=#a6da95 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_disabled_normal guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_disabled_insert guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_disabled_visual guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_disabled_replace guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_disabled_command guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_disabled_terminal guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_disabled_inactive guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_offline_normal guifg=#eed49f guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_offline_insert guifg=#eed49f guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_offline_visual guifg=#eed49f guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_offline_replace guifg=#eed49f guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_offline_command guifg=#eed49f guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_offline_terminal guifg=#eed49f guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_offline_inactive guifg=#eed49f guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_unknown_normal guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_unknown_insert guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_unknown_visual guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_unknown_replace guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_unknown_command guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_unknown_terminal guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_unknown_inactive guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_spinner_normal guifg=#6272A4 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_spinner_insert guifg=#6272A4 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_spinner_visual guifg=#6272A4 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_spinner_replace guifg=#6272A4 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_spinner_command guifg=#6272A4 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_spinner_terminal guifg=#6272A4 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_spinner_inactive guifg=#6272A4 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_7_normal guifg=#8aadf4 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_7_insert guifg=#8aadf4 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_7_visual guifg=#8aadf4 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_7_replace guifg=#8aadf4 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_7_command guifg=#8aadf4 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_7_terminal guifg=#8aadf4 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_7_inactive guifg=#8aadf4 guibg=#1e2030 gui=None
Executing: highlight! lualine_b_progress_normal guifg=#a5adcb guibg=#363a4f gui=None
Executing: highlight! lualine_b_progress_insert guifg=#a5adcb guibg=#363a4f gui=None
Executing: highlight! lualine_b_progress_visual guifg=#a5adcb guibg=#363a4f gui=None
Executing: highlight! lualine_b_progress_replace guifg=#a5adcb guibg=#363a4f gui=None
Executing: highlight! lualine_b_progress_command guifg=#a5adcb guibg=#363a4f gui=None
Executing: highlight! lualine_b_progress_terminal guifg=#a5adcb guibg=#363a4f gui=None
Executing: highlight! lualine_b_progress_inactive guifg=#a5adcb guibg=#1e2030 gui=None
Executing: highlight! lualine_b_location_normal guifg=#a5adcb guibg=#363a4f gui=None
Executing: highlight! lualine_b_location_insert guifg=#a5adcb guibg=#363a4f gui=None
Executing: highlight! lualine_b_location_visual guifg=#a5adcb guibg=#363a4f gui=None
Executing: highlight! lualine_b_location_replace guifg=#a5adcb guibg=#363a4f gui=None
Executing: highlight! lualine_b_location_command guifg=#a5adcb guibg=#363a4f gui=None
Executing: highlight! lualine_b_location_terminal guifg=#a5adcb guibg=#363a4f gui=None
Executing: highlight! lualine_b_location_inactive guifg=#a5adcb guibg=#1e2030 gui=None
Executing: highlight! lualine_b_11_normal guifg=#a5adcb guibg=#363a4f gui=None
Executing: highlight! lualine_b_11_insert guifg=#a5adcb guibg=#363a4f gui=None
Executing: highlight! lualine_b_11_visual guifg=#a5adcb guibg=#363a4f gui=None
Executing: highlight! lualine_b_11_replace guifg=#a5adcb guibg=#363a4f gui=None
Executing: highlight! lualine_b_11_command guifg=#a5adcb guibg=#363a4f gui=None
Executing: highlight! lualine_b_11_terminal guifg=#a5adcb guibg=#363a4f gui=None
Executing: highlight! lualine_b_11_inactive guifg=#a5adcb guibg=#1e2030 gui=None
Executing: highlight! lualine_z_filetype guifg=#363a4f guibg=#f5bde6 gui=None
Executing: highlight! lualine_z_filename guifg=#363a4f guibg=#f5bde6 gui=None
Executing: highlight! lualine_y_branch_normal guifg=#b7bdf8 guibg=#363a4f gui=None
Executing: highlight! lualine_y_branch_insert guifg=#b7bdf8 guibg=#363a4f gui=None
Executing: highlight! lualine_y_branch_visual guifg=#b7bdf8 guibg=#363a4f gui=None
Executing: highlight! lualine_y_branch_replace guifg=#b7bdf8 guibg=#363a4f gui=None
Executing: highlight! lualine_y_branch_command guifg=#b7bdf8 guibg=#363a4f gui=None
Executing: highlight! lualine_y_branch_terminal guifg=#b7bdf8 guibg=#363a4f gui=None
Executing: highlight! lualine_y_branch_inactive guifg=#b7bdf8 guibg=#1e2030 gui=None
Executing: au lualine BufEnter *
--- Autocommands ---
Executing: autocmd lualine BufEnter * lua require'lualine.components.branch.git_branch'.find_git_dir()
Executing: highlight! lualine_y_diff_added_normal guifg=#a6da95 guibg=#363a4f gui=None
Executing: highlight! lualine_y_diff_added_insert guifg=#a6da95 guibg=#363a4f gui=None
Executing: highlight! lualine_y_diff_added_visual guifg=#a6da95 guibg=#363a4f gui=None
Executing: highlight! lualine_y_diff_added_replace guifg=#a6da95 guibg=#363a4f gui=None
Executing: highlight! lualine_y_diff_added_command guifg=#a6da95 guibg=#363a4f gui=None
Executing: highlight! lualine_y_diff_added_terminal guifg=#a6da95 guibg=#363a4f gui=None
Executing: highlight! lualine_y_diff_added_inactive guifg=#a6da95 guibg=#1e2030 gui=None
Executing: highlight! lualine_y_diff_modified_normal guifg=#8aadf4 guibg=#363a4f gui=None
Executing: highlight! lualine_y_diff_modified_insert guifg=#8aadf4 guibg=#363a4f gui=None
Executing: highlight! lualine_y_diff_modified_visual guifg=#8aadf4 guibg=#363a4f gui=None
Executing: highlight! lualine_y_diff_modified_replace guifg=#8aadf4 guibg=#363a4f gui=None
Executing: highlight! lualine_y_diff_modified_command guifg=#8aadf4 guibg=#363a4f gui=None
Executing: highlight! lualine_y_diff_modified_terminal guifg=#8aadf4 guibg=#363a4f gui=None
Executing: highlight! lualine_y_diff_modified_inactive guifg=#8aadf4 guibg=#1e2030 gui=None
Executing: highlight! lualine_y_diff_removed_normal guifg=#ed8796 guibg=#363a4f gui=None
Executing: highlight! lualine_y_diff_removed_insert guifg=#ed8796 guibg=#363a4f gui=None
Executing: highlight! lualine_y_diff_removed_visual guifg=#ed8796 guibg=#363a4f gui=None
Executing: highlight! lualine_y_diff_removed_replace guifg=#ed8796 guibg=#363a4f gui=None
Executing: highlight! lualine_y_diff_removed_command guifg=#ed8796 guibg=#363a4f gui=None
Executing: highlight! lualine_y_diff_removed_terminal guifg=#ed8796 guibg=#363a4f gui=None
Executing: highlight! lualine_y_diff_removed_inactive guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_16_normal guifg=#8087a2 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_16_insert guifg=#8087a2 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_16_visual guifg=#8087a2 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_16_replace guifg=#8087a2 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_16_command guifg=#8087a2 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_16_terminal guifg=#8087a2 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_16_inactive guifg=#8087a2 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_error_0_normal guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_error_0_insert guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_error_0_visual guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_error_0_replace guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_error_0_command guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_error_0_terminal guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_error_0_inactive guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_warn_0_normal guifg=#eed49f guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_warn_0_insert guifg=#eed49f guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_warn_0_visual guifg=#eed49f guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_warn_0_replace guifg=#eed49f guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_warn_0_command guifg=#eed49f guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_warn_0_terminal guifg=#eed49f guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_warn_0_inactive guifg=#eed49f guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_info_0_normal guifg=#91d7e3 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_info_0_insert guifg=#91d7e3 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_info_0_visual guifg=#91d7e3 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_info_0_replace guifg=#91d7e3 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_info_0_command guifg=#91d7e3 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_info_0_terminal guifg=#91d7e3 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_info_0_inactive guifg=#91d7e3 guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_hint_0_normal guifg=#8bd5ca guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_hint_0_insert guifg=#8bd5ca guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_hint_0_visual guifg=#8bd5ca guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_hint_0_replace guifg=#8bd5ca guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_hint_0_command guifg=#8bd5ca guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_hint_0_terminal guifg=#8bd5ca guibg=#1e2030 gui=None
Executing: highlight! lualine_c_diagnostics_hint_0_inactive guifg=#8bd5ca guibg=#1e2030 gui=None
Executing: highlight! lualine_x_19_normal guifg=#a6da95 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_19_insert guifg=#a6da95 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_19_visual guifg=#a6da95 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_19_replace guifg=#a6da95 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_19_command guifg=#a6da95 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_19_terminal guifg=#a6da95 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_19_inactive guifg=#a6da95 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_sleep_0_normal guifg=#a5adcb guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_sleep_0_insert guifg=#a5adcb guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_sleep_0_visual guifg=#a5adcb guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_sleep_0_replace guifg=#a5adcb guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_sleep_0_command guifg=#a5adcb guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_sleep_0_terminal guifg=#a5adcb guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_sleep_0_inactive guifg=#a5adcb guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_enabled_0_normal guifg=#a6da95 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_enabled_0_insert guifg=#a6da95 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_enabled_0_visual guifg=#a6da95 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_enabled_0_replace guifg=#a6da95 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_enabled_0_command guifg=#a6da95 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_enabled_0_terminal guifg=#a6da95 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_enabled_0_inactive guifg=#a6da95 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_disabled_0_normal guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_disabled_0_insert guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_disabled_0_visual guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_disabled_0_replace guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_disabled_0_command guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_disabled_0_terminal guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_disabled_0_inactive guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_offline_0_normal guifg=#eed49f guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_offline_0_insert guifg=#eed49f guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_offline_0_visual guifg=#eed49f guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_offline_0_replace guifg=#eed49f guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_offline_0_command guifg=#eed49f guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_offline_0_terminal guifg=#eed49f guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_offline_0_inactive guifg=#eed49f guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_unknown_0_normal guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_unknown_0_insert guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_unknown_0_visual guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_unknown_0_replace guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_unknown_0_command guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_unknown_0_terminal guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_unknown_0_inactive guifg=#ed8796 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_spinner_0_normal guifg=#6272A4 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_spinner_0_insert guifg=#6272A4 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_spinner_0_visual guifg=#6272A4 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_spinner_0_replace guifg=#6272A4 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_spinner_0_command guifg=#6272A4 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_spinner_0_terminal guifg=#6272A4 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_copilot_spinner_0_inactive guifg=#6272A4 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_21_normal guifg=#8aadf4 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_21_insert guifg=#8aadf4 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_21_visual guifg=#8aadf4 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_21_replace guifg=#8aadf4 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_21_command guifg=#8aadf4 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_21_terminal guifg=#8aadf4 guibg=#1e2030 gui=None
Executing: highlight! lualine_x_21_inactive guifg=#8aadf4 guibg=#1e2030 gui=None
Executing: highlight! lualine_b_progress_0_normal guifg=#a5adcb guibg=#363a4f gui=None
Executing: highlight! lualine_b_progress_0_insert guifg=#a5adcb guibg=#363a4f gui=None
Executing: highlight! lualine_b_progress_0_visual guifg=#a5adcb guibg=#363a4f gui=None
Executing: highlight! lualine_b_progress_0_replace guifg=#a5adcb guibg=#363a4f gui=None
Executing: highlight! lualine_b_progress_0_command guifg=#a5adcb guibg=#363a4f gui=None
Executing: highlight! lualine_b_progress_0_terminal guifg=#a5adcb guibg=#363a4f gui=None
Executing: highlight! lualine_b_progress_0_inactive guifg=#a5adcb guibg=#1e2030 gui=None
Executing: highlight! lualine_b_location_0_normal guifg=#a5adcb guibg=#363a4f gui=None
Executing: highlight! lualine_b_location_0_insert guifg=#a5adcb guibg=#363a4f gui=None
Executing: highlight! lualine_b_location_0_visual guifg=#a5adcb guibg=#363a4f gui=None
Executing: highlight! lualine_b_location_0_replace guifg=#a5adcb guibg=#363a4f gui=None
Executing: highlight! lualine_b_location_0_command guifg=#a5adcb guibg=#363a4f gui=None
Executing: highlight! lualine_b_location_0_terminal guifg=#a5adcb guibg=#363a4f gui=None
Executing: highlight! lualine_b_location_0_inactive guifg=#a5adcb guibg=#1e2030 gui=None
Executing: highlight! lualine_b_25_normal guifg=#a5adcb guibg=#363a4f gui=None
Executing: highlight! lualine_b_25_insert guifg=#a5adcb guibg=#363a4f gui=None
Executing: highlight! lualine_b_25_visual guifg=#a5adcb guibg=#363a4f gui=None
Executing: highlight! lualine_b_25_replace guifg=#a5adcb guibg=#363a4f gui=None
Executing: highlight! lualine_b_25_command guifg=#a5adcb guibg=#363a4f gui=None
Executing: highlight! lualine_b_25_terminal guifg=#a5adcb guibg=#363a4f gui=None
Executing: highlight! lualine_b_25_inactive guifg=#a5adcb guibg=#1e2030 gui=None
Executing: highlight! lualine_z_filetype_0 guifg=#363a4f guibg=#f5bde6 gui=None
Executing: highlight! lualine_z_filename_0 guifg=#363a4f guibg=#f5bde6 gui=None
Executing: highlight! lualine_y_branch_0_normal guifg=#b7bdf8 guibg=#363a4f gui=None
Executing: highlight! lualine_y_branch_0_insert guifg=#b7bdf8 guibg=#363a4f gui=None
Executing: highlight! lualine_y_branch_0_visual guifg=#b7bdf8 guibg=#363a4f gui=None
Executing: highlight! lualine_y_branch_0_replace guifg=#b7bdf8 guibg=#363a4f gui=None
Executing: highlight! lualine_y_branch_0_command guifg=#b7bdf8 guibg=#363a4f gui=None
Executing: highlight! lualine_y_branch_0_terminal guifg=#b7bdf8 guibg=#363a4f gui=None
Executing: highlight! lualine_y_branch_0_inactive guifg=#b7bdf8 guibg=#1e2030 gui=None
Executing: au lualine BufEnter *
--- Autocommands ---
lualine  BufEnter
    *         lua require'lualine.components.branch.git_branch'.find_git_dir()
	Last set from ~/.config/nvim/vim/_editor.lua
Executing: highlight! lualine_y_diff_added_0_normal guifg=#a6da95 guibg=#363a4f gui=None
Executing: highlight! lualine_y_diff_added_0_insert guifg=#a6da95 guibg=#363a4f gui=None
Executing: highlight! lualine_y_diff_added_0_visual guifg=#a6da95 guibg=#363a4f gui=None
Executing: highlight! lualine_y_diff_added_0_replace guifg=#a6da95 guibg=#363a4f gui=None
Executing: highlight! lualine_y_diff_added_0_command guifg=#a6da95 guibg=#363a4f gui=None
Executing: highlight! lualine_y_diff_added_0_terminal guifg=#a6da95 guibg=#363a4f gui=None
Executing: highlight! lualine_y_diff_added_0_inactive guifg=#a6da95 guibg=#1e2030 gui=None
Executing: highlight! lualine_y_diff_modified_0_normal guifg=#8aadf4 guibg=#363a4f gui=None
Executing: highlight! lualine_y_diff_modified_0_insert guifg=#8aadf4 guibg=#363a4f gui=None
Executing: highlight! lualine_y_diff_modified_0_visual guifg=#8aadf4 guibg=#363a4f gui=None
Executing: highlight! lualine_y_diff_modified_0_replace guifg=#8aadf4 guibg=#363a4f gui=None
Executing: highlight! lualine_y_diff_modified_0_command guifg=#8aadf4 guibg=#363a4f gui=None
Executing: highlight! lualine_y_diff_modified_0_terminal guifg=#8aadf4 guibg=#363a4f gui=None
Executing: highlight! lualine_y_diff_modified_0_inactive guifg=#8aadf4 guibg=#1e2030 gui=None
Executing: highlight! lualine_y_diff_removed_0_normal guifg=#ed8796 guibg=#363a4f gui=None
Executing: highlight! lualine_y_diff_removed_0_insert guifg=#ed8796 guibg=#363a4f gui=None
Executing: highlight! lualine_y_diff_removed_0_visual guifg=#ed8796 guibg=#363a4f gui=None
Executing: highlight! lualine_y_diff_removed_0_replace guifg=#ed8796 guibg=#363a4f gui=None
Executing: highlight! lualine_y_diff_removed_0_command guifg=#ed8796 guibg=#363a4f gui=None
Executing: highlight! lualine_y_diff_removed_0_terminal guifg=#ed8796 guibg=#363a4f gui=None
Executing: highlight! lualine_y_diff_removed_0_inactive guifg=#ed8796 guibg=#1e2030 gui=None
Executing: 


--- Terminal info --- {{{
&term: wezterm
Description: Wez's terminal emulator
Aliases: wezterm
Boolean capabilities:
  auto_left_margin          bw         = false
  auto_right_margin         am         = true
  no_esc_ctlc               xsb        = false
  ceol_standout_glitch      xhp        = false
  eat_newline_glitch        xenl       = true
  erase_overstrike          eo         = false
  generic_type              gn         = false
  hard_copy                 hc         = false
  has_meta_key              km         = true
  has_status_line           hs         = true
  insert_null_glitch        in         = false
  memory_above              da         = false
  memory_below              db         = false
  move_insert_mode          mir        = true
  move_standout_mode        msgr       = true
  over_strike               os         = false
  status_line_esc_ok        eslok      = false
  dest_tabs_magic_smso      xt         = false
  tilde_glitch              hz         = false
  transparent_underline     ul         = false
  xon_xoff                  xon        = false
  needs_xon_xoff            nxon       = false
  prtr_silent               mc5i       = true
  hard_cursor               chts       = false
  non_rev_rmcup             nrrmc      = false
  no_pad_char               npc        = true
  non_dest_scroll_region    ndscr      = false
  can_change                ccc        = true
  back_color_erase          bce        = false
  hue_lightness_saturation  hls        = false
  col_addr_glitch           xhpa       = false
  cr_cancels_micro_mode     crxm       = false
  has_print_wheel           daisy      = false
  row_addr_glitch           xvpa       = false
  semi_auto_right_margin    sam        = false
  cpi_changes_res           cpix       = false
  lpi_changes_res           lpix       = false
  backspaces_with_bs        OTbs       = false
  crt_no_scrolling          OTns       = false
  no_correctly_working_cr   OTnc       = false
  gnu_has_meta_key          OTMT       = false
  linefeed_is_newline       OTNL       = false
  has_hardware_tabs         OTpt       = false
  return_does_clr_eol       OTxr       = false
Numeric capabilities:
  columns                   cols       = 80
  init_tabs                 it         = 8
  lines                     lines      = 24
  lines_of_memory           lm         = -1
  magic_cookie_glitch       xmc        = -1
  padding_baud_rate         pb         = -1
  virtual_terminal          vt         = -1
  width_status_line         wsl        = -1
  num_labels                nlab       = -1
  label_height              lh         = -1
  label_width               lw         = -1
  max_attributes            ma         = -1
  maximum_windows           wnum       = -1
  max_colors                colors     = 256
  max_pairs                 pairs      = 32767
  no_color_video            ncv        = -1
  buffer_capacity           bufsz      = -1
  dot_vert_spacing          spinv      = -1
  dot_horz_spacing          spinh      = -1
  max_micro_address         maddr      = -1
  max_micro_jump            mjump      = -1
  micro_col_size            mcs        = -1
  micro_line_size           mls        = -1
  number_of_pins            npins      = -1
  output_res_char           orc        = -1
  output_res_line           orl        = -1
  output_res_horz_inch      orhi       = -1
  output_res_vert_inch      orvi       = -1
  print_rate                cps        = -1
  wide_char_size            widcs      = -1
  buttons                   btns       = -1
  bit_image_entwining       bitwin     = -1
  bit_image_type            bitype     = -1
  magic_cookie_glitch_ul    OTug       = -1
  carriage_return_delay     OTdC       = -1
  new_line_delay            OTdN       = -1
  backspace_delay           OTdB       = -1
  horizontal_tab_delay      OTdT       = -1
  number_of_function_keys   OTkn       = -1
String capabilities:
  back_tab                  cbt        = ^[[Z
  bell                      bel        = ^G
  carriage_return           cr         = ^M
  change_scroll_region      csr        = ^[[%i%p1%d;%p2%dr
  clear_all_tabs            tbc        = ^[[3g
  clear_screen              clear      = ^[[H^[[2J
  clr_eol                   el         = ^[[K
  clr_eos                   ed         = ^[[J
  column_address            hpa        = ^[[%i%p1%dG
  cursor_address            cup        = ^[[%i%p1%d;%p2%dH
  cursor_down               cud1       = ^@
  cursor_home               home       = ^[[H
  cursor_invisible          civis      = ^[[?25l
  cursor_left               cub1       = ^H
  cursor_normal             cnorm      = ^[[?25h
  cursor_right              cuf1       = ^[[C
  cursor_up                 cuu1       = ^[[A
  cursor_visible            cvvis      = ^[[?12;25h
  delete_character          dch1       = ^[[P
  delete_line               dl1        = ^[[M
  dis_status_line           dsl        = ^[]2;^[\
  enter_alt_charset_mode    smacs      = ^[(0
  enter_blink_mode          blink      = ^[[5m
  enter_bold_mode           bold       = ^[[1m
  enter_ca_mode             smcup      = ^[[?1049h^[[22;0;0t
  enter_dim_mode            dim        = ^[[2m
  enter_insert_mode         smir       = ^[[4h
  enter_secure_mode         invis      = ^[[8m
  enter_reverse_mode        rev        = ^[[7m
  enter_standout_mode       smso       = ^[[7m
  enter_underline_mode      smul       = ^[[4m
  erase_chars               ech        = ^[[%p1%dX
  exit_alt_charset_mode     rmacs      = ^[(B
  exit_attribute_mode       sgr0       = ^[(B^[[m
  exit_ca_mode              rmcup      = ^[[?1049l^[[23;0;0t
  exit_insert_mode          rmir       = ^[[4l
  exit_standout_mode        rmso       = ^[[27m
  exit_underline_mode       rmul       = ^[[24m
  flash_screen              flash      = ^[[?5h$<100/>^[[?5l
  from_status_line          fsl        = ^[\
  init_2string              is2        = ^[[!p^[[?3;4l^[[4l^[>
  insert_line               il1        = ^[[L
  key_backspace             kbs        = ^?
  key_dc                    kdch1      = ^[[3~
  key_down                  kcud1      = ^[OB
  key_f1                    kf1        = ^[OP
  key_f10                   kf10       = ^[[21~
  key_f2                    kf2        = ^[OQ
  key_f3                    kf3        = ^[OR
  key_f4                    kf4        = ^[OS
  key_f5                    kf5        = ^[[15~
  key_f6                    kf6        = ^[[17~
  key_f7                    kf7        = ^[[18~
  key_f8                    kf8        = ^[[19~
  key_f9                    kf9        = ^[[20~
  key_home                  khome      = ^[OH
  key_ic                    kich1      = ^[[2~
  key_left                  kcub1      = ^[OD
  key_npage                 knp        = ^[[6~
  key_ppage                 kpp        = ^[[5~
  key_right                 kcuf1      = ^[OC
  key_sf                    kind       = ^[[1;2B
  key_sr                    kri        = ^[[1;2A
  key_up                    kcuu1      = ^[OA
  keypad_local              rmkx       = ^[[?1l^[>
  keypad_xmit               smkx       = ^[[?1h^[=
  meta_off                  rmm        = ^[[?1034l
  meta_on                   smm        = ^[[?1034h
  parm_dch                  dch        = ^[[%p1%dP
  parm_delete_line          dl         = ^[[%p1%dM
  parm_down_cursor          cud        = ^[[%p1%dB
  parm_ich                  ich        = ^[[%p1%d@
  parm_index                indn       = ^[[%p1%dS
  parm_insert_line          il         = ^[[%p1%dL
  parm_left_cursor          cub        = ^[[%p1%dD
  parm_right_cursor         cuf        = ^[[%p1%dC
  parm_rindex               rin        = ^[[%p1%dT
  parm_up_cursor            cuu        = ^[[%p1%dA
  print_screen              mc0        = ^[[i
  prtr_off                  mc4        = ^[[4i
  prtr_on                   mc5        = ^[[5i
  repeat_char               rep        = %p1%c^[[%p2%{1}%-%db
  reset_1string             rs1        = ^[c^[]104^G
  reset_2string             rs2        = ^[[!p^[[?3;4l^[[4l^[>
  restore_cursor            rc         = ^[8
  row_address               vpa        = ^[[%i%p1%dd
  save_cursor               sc         = ^[7
  scroll_forward            ind        = ^@
  scroll_reverse            ri         = ^[M
  set_attributes            sgr        = %?%p9%t^[(0%e^[(B%;^[[0%?%p6%t;1%;%?%p5%t;2%;%?%p2%t;4%;%?%p1%p3%|%t;7%;%?%p4%t;5%;%?%p7%t;8%;m
  set_tab                   hts        = ^[H
  tab                       ht         = 	
  to_status_line            tsl        = ^[]0;
  key_b2                    kb2        = ^[OE
  acs_chars                 acsc       = ``aaffggiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz{{||}}~~
  key_btab                  kcbt       = ^[[Z
  enter_am_mode             smam       = ^[[?7h
  exit_am_mode              rmam       = ^[[?7l
  key_end                   kend       = ^[OF
  key_enter                 kent       = ^[OM
  key_sdc                   kDC        = ^[[3;2~
  key_send                  kEND       = ^[[1;2F
  key_shome                 kHOM       = ^[[1;2H
  key_sic                   kIC        = ^[[2;2~
  key_sleft                 kLFT       = ^[[1;2D
  key_snext                 kNXT       = ^[[6;2~
  key_sprevious             kPRV       = ^[[5;2~
  key_sright                kRIT       = ^[[1;2C
  key_f11                   kf11       = ^[[23~
  key_f12                   kf12       = ^[[24~
  key_f13                   kf13       = ^[[1;2P
  key_f14                   kf14       = ^[[1;2Q
  key_f15                   kf15       = ^[[1;2R
  key_f16                   kf16       = ^[[1;2S
  key_f17                   kf17       = ^[[15;2~
  key_f18                   kf18       = ^[[17;2~
  key_f19                   kf19       = ^[[18;2~
  key_f20                   kf20       = ^[[19;2~
  key_f21                   kf21       = ^[[20;2~
  key_f22                   kf22       = ^[[21;2~
  key_f23                   kf23       = ^[[23;2~
  key_f24                   kf24       = ^[[24;2~
  key_f25                   kf25       = ^[[1;5P
  key_f26                   kf26       = ^[[1;5Q
  key_f27                   kf27       = ^[[1;5R
  key_f28                   kf28       = ^[[1;5S
  key_f29                   kf29       = ^[[15;5~
  key_f30                   kf30       = ^[[17;5~
  key_f31                   kf31       = ^[[18;5~
  key_f32                   kf32       = ^[[19;5~
  key_f33                   kf33       = ^[[20;5~
  key_f34                   kf34       = ^[[21;5~
  key_f35                   kf35       = ^[[23;5~
  key_f36                   kf36       = ^[[24;5~
  key_f37                   kf37       = ^[[1;6P
  key_f38                   kf38       = ^[[1;6Q
  key_f39                   kf39       = ^[[1;6R
  key_f40                   kf40       = ^[[1;6S
  key_f41                   kf41       = ^[[15;6~
  key_f42                   kf42       = ^[[17;6~
  key_f43                   kf43       = ^[[18;6~
  key_f44                   kf44       = ^[[19;6~
  key_f45                   kf45       = ^[[20;6~
  key_f46                   kf46       = ^[[21;6~
  key_f47                   kf47       = ^[[23;6~
  key_f48                   kf48       = ^[[24;6~
  key_f49                   kf49       = ^[[1;3P
  key_f50                   kf50       = ^[[1;3Q
  key_f51                   kf51       = ^[[1;3R
  key_f52                   kf52       = ^[[1;3S
  key_f53                   kf53       = ^[[15;3~
  key_f54                   kf54       = ^[[17;3~
  key_f55                   kf55       = ^[[18;3~
  key_f56                   kf56       = ^[[19;3~
  key_f57                   kf57       = ^[[20;3~
  key_f58                   kf58       = ^[[21;3~
  key_f59                   kf59       = ^[[23;3~
  key_f60                   kf60       = ^[[24;3~
  key_f61                   kf61       = ^[[1;4P
  key_f62                   kf62       = ^[[1;4Q
  key_f63                   kf63       = ^[[1;4R
  clr_bol                   el1        = ^[[1K
  user6                     u6         = ^[[%i%d;%dR
  user7                     u7         = ^[[6n
  user8                     u8         = ^[[?%[;0123456789]c
  user9                     u9         = ^[[c
  orig_pair                 op         = ^[[39;49m
  orig_colors               oc         = ^[]104^G
  initialize_color          initc      = ^[]4;%p1%d;rgb:%p2%{255}%*%{1000}%/%2.2X/%p3%{255}%*%{1000}%/%2.2X/%p4%{255}%*%{1000}%/%2.2X^[\
  enter_italics_mode        sitm       = ^[[3m
  exit_italics_mode         ritm       = ^[[23m
  key_mouse                 kmous      = ^[[<
  set_a_foreground          setaf      = ^[[%?%p1%{8}%<%t3%p1%d%e%p1%{16}%<%t9%p1%{8}%-%d%e38;5;%p1%d%;m
  set_a_background          setab      = ^[[%?%p1%{8}%<%t4%p1%d%e%p1%{16}%<%t10%p1%{8}%-%d%e48;5;%p1%d%;m
  memory_lock               meml       = ^[l
  memory_unlock             memu       = ^[m
Extended boolean capabilities:
  Tc                        = true
Extended string capabilities:
  Cr                        = ^[]112^G
  Cs                        = ^[]12;%p1%s^G
  Ms                        = ^[]52;%p1%s;%p2%s^G
  Se                        = ^[[2 q
  Setulc                    = ^[[58:2::%p1%{65536}%/%d:%p1%{256}%/%{255}%&%d:%p1%{255}%&%d%;m
  Smol                      = ^[[53m
  Smulx                     = ^[[4:%p1%dm
  Ss                        = ^[[%p1%d q
  Sync                      = ^[[?2026%?%p1%{1}%-%tl%eh%;
  XM                        = ^[[?1006;1000%?%p1%{1}%=%th%el%;
  rmxx                      = ^[[29m
  smxx                      = ^[[9m
  xm                        = ^[[<%i%p3%d;%p1%d;%p2%d;%?%p4%tM%em%;
  ext.enter_altfont_mode    = ^[[11m
  setrgbf                   = ^[[38;2;%p1%d;%p2%d;%p3%dm
  setrgbb                   = ^[[48;2;%p1%d;%p2%d;%p3%dm
  ext.save_title            = ^[[22;0t
  ext.restore_title         = ^[[23;0t
  ext.set_title             = ^[]0;%p2%s^[\
  ext.enable_lr_margin      = ^[[?69h
  ext.disable_lr_margin     = ^[[?69l
  ext.enable_bpaste         = ^[[?2004h
  ext.disable_bpaste        = ^[[?2004l
  ext.enable_focus          = ^[[?1004h
  ext.disable_focus         = ^[[?1004l
  ext.enable_mouse          = ^[[?1002h^[[?1006h
  ext.disable_mouse         = ^[[?1002l^[[?1006l
  ext.enable_mouse_move     = ^[[?1003h
  ext.disable_mouse_move    = ^[[?1003l
  ext.set_underline_color   = ^[[58:2::%p1%d:%p2%d:%p3%dm
}}}

Executing User Autocommands for "LazyLoad"
autocommand <Lua 676: ~/.local/share/nvim/lazy/lazydev.nvim/lua/lazydev/integrations/init.lua:29>

Executing: 
Executing WinResized Autocommands for "*"
autocommand <Lua 348: ~/.local/share/nvim/lazy/alpha-nvim/lua/alpha.lua:535>

Executing: 
Executing WinResized Autocommands for "*"
autocommand <Lua 512: ~/.local/share/nvim/lazy/edgy.nvim/lua/edgy/util.lua:48>

Executing: 
Executing WinResized Autocommands for "*"
autocommand <Lua 424: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/windows/autocomplete.lua:70>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 510: ~/.local/share/nvim/lazy/edgy.nvim/lua/edgy/state.lua:38>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand <Lua 546: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:672>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand lua require("todo-comments.highlight").highlight_win()

Executing: lua require("todo-comments.highlight").highlight_win()
Executing WinScrolled Autocommands for "*"
autocommand <Lua 420: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/windows/autocomplete.lua:70>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call <SID>StartHL()

Executing: call <SID>StartHL()
calling <SNR>20_StartHL()

line 1:     if !v:hlsearch || mode() isnot 'n'
line 2:         return
<SNR>20_StartHL returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "<buffer=1>"
autocommand <Lua 389: ~/.local/share/nvim/lazy/alpha-nvim/lua/alpha.lua:525>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 404: ~/.local/share/nvim/lazy/mini.cursorword/lua/mini/cursorword.lua:187>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 509: ~/.local/share/nvim/lazy/edgy.nvim/lua/edgy/state.lua:21>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 540: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:670>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:matchparen.highlight_deferred()

Executing: call s:matchparen.highlight_deferred()
calling 3()

line 1:   if !get(b:, 'matchup_matchparen_deferred', g:matchup_matchparen_deferred)
line 3:     return s:matchparen.highlight()
calling 4()

line 1:   if !g:matchup_matchparen_enabled | return | endif
line 1:  return | endif
line 1:  endif
line 2: 
line 3:   if has('vim_starting') | return | endif
line 3:  return | endif
line 3:  endif
line 4: 
line 5:   if !g:matchup_matchparen_pumvisible && s:pumvisible() | return | endif
line 5:  return | endif
line 5:  endif
line 6: 
line 7:   " try to avoid interfering with some auto-complete plugins
line 8:   if has('*state') && state('a') !=# '' | return | endif
line 8:  return | endif
line 8:  endif
line 9: 
line 10:   if !get(b:, 'matchup_matchparen_enabled', 1) && get(b:, 'matchup_matchparen_fallback', 1) && s:pi_paren_sid()
line 12:     return call(s:pi_paren_fcn, [])
line 13:   endif
line 14: 
line 15:   if !get(b:, 'matchup_matchparen_enabled', 1) | return | endif
line 15:  return | endif
line 15:  endif
line 16: 
line 17:   let l:force_update    = a:0 >= 1 ? a:1 : 0
line 18:   let l:changing_insert = a:0 >= 2 ? a:2 : 0
line 19:   let l:real_mode = l:changing_insert ? v:insertmode : mode()
line 20: 
line 21:   if !l:force_update && exists('w:last_changedtick') && exists('w:last_cursor') && matchup#pos#equal(w:last_cursor, matchup#pos#get_cursor()) && w:last_changedtick == b:changedtick
line 25:     return
line 26:   endif
line 27:   let w:last_changedtick = b:changedtick
line 28:   let w:last_cursor = matchup#pos#get_cursor()
Searching for "autoload/matchup/pos.vim" in runtime path
Searching for "/home/rachartier/.config/nvim/autoload/matchup/pos.vim"
Searching for "/home/rachartier/.local/share/nvim/site/autoload/matchup/pos.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/lazy.nvim/autoload/matchup/pos.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/lazydev.nvim/autoload/matchup/pos.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/copilot-lualine/autoload/matchup/pos.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/lualine.nvim/autoload/matchup/pos.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/debugprint.nvim/autoload/matchup/pos.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/mini.hipatterns/autoload/matchup/pos.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/mini.align/autoload/matchup/pos.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/fwatch.nvim/autoload/matchup/pos.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/mini.icons/autoload/matchup/pos.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/copilot.lua/autoload/matchup/pos.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-nio/autoload/matchup/pos.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/dressing.nvim/autoload/matchup/pos.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/avante.nvim/autoload/matchup/pos.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/todo-comments.nvim/autoload/matchup/pos.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/git-conflict.nvim/autoload/matchup/pos.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/which-key.nvim/autoload/matchup/pos.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/tiny-inline-diagnostic.nvim/autoload/matchup/pos.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/tmux.nvim/autoload/matchup/pos.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/mini.surround/autoload/matchup/pos.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/gitsigns.nvim/autoload/matchup/pos.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/telescope-fzf-native.nvim/autoload/matchup/pos.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/plenary.nvim/autoload/matchup/pos.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/telescope.nvim/autoload/matchup/pos.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/tiny-buffers-switcher.nvim/autoload/matchup/pos.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-scissors/autoload/matchup/pos.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/vim-matchup/autoload/matchup/pos.vim"
line 28: sourcing "/home/rachartier/.local/share/nvim/lazy/vim-matchup/autoload/matchup/pos.vim"
line 1: " vim match-up - even better matching
line 2: "
line 3: " Maintainer: Andy Massimino
line 4: " Email:      a@normed.space
line 5: "
line 6: 
line 7: let s:save_cpo = &cpo
line 8: set cpo&vim
line 9: 
line 10: function! matchup#pos#set_cursor(...) abort " {{{1
line 13: 
line 14: " }}}1
line 15: " function! matchup#pos#get_cursor() {{{1
line 16: if exists('*getcurpos')
line 17:   function! matchup#pos#get_cursor() abort
line 20: else
line 21:   function! matchup#pos#get_cursor() abort
line 24: endif
line 25: 
line 26: " }}}1
line 27: 
line 28: " }}}1
line 29: function! matchup#pos#get_cursor_line() abort " {{{1
line 33: 
line 34: " }}}1
line 35: 
line 36: function! matchup#pos#(...) abort " {{{1
line 40: 
line 41: " }}}1
line 42: function! matchup#pos#val(...) " {{{1
line 47: 
line 48: " }}}1
line 49: function! matchup#pos#next_eol(...) abort " {{{1
line 62: 
line 63: " }}}1
line 64: function! matchup#pos#next(...) abort " {{{1
line 75: 
line 76: " }}}1
line 77: function! matchup#pos#prev_eol(...) abort " {{{1
line 86: 
line 87: " }}}1
line 88: function! matchup#pos#prev(...) abort " {{{1
line 98: 
line 99: " }}}1
line 100: 
line 101: function! matchup#pos#larger(pos1, pos2) abort " {{{1
line 104: 
line 105: " }}}1
line 106: function! matchup#pos#equal(p1, p2) abort " {{{1
line 111: 
line 112: " }}}1
line 113: function! matchup#pos#smaller(pos1, pos2) abort " {{{1
line 116: 
line 117: " }}}1
line 118: function! matchup#pos#smaller_or_equal(pos1, pos2) abort " {{{1
line 122: 
line 123: " }}}1
line 124: function! s:parse_args(args) abort " {{{1
line 149: 
line 150: " }}}1
line 151: 
line 152: let &cpo = s:save_cpo
line 153: 
line 154: " vim: fdm=marker sw=2
finished sourcing /home/rachartier/.local/share/nvim/lazy/vim-matchup/autoload/matchup/pos.vim
continuing in 4
calling matchup#pos#get_cursor()

line 1:     return getcurpos()
matchup#pos#get_cursor returning [0, 26, 109, 0, 106]

continuing in 4

line 29: 
line 30:   call matchup#perf#tic('matchparen.highlight')
calling matchup#perf#tic('matchparen.highlight')

line 1:   let s:time_start[a:context] = reltime()
matchup#perf#tic returning #0

continuing in 4

line 31: 
line 32:   " request eventual clearing of stale matches
line 33:   let l:token = {}
line 34:   call self.fade(0, [], l:token)
calling 2(0, [], {})

line 1:   ""
line 2:   " fade feature: remove highlights after a certain time
line 3:   " {level}
line 4:   "   =  0: prepare for possible loss of cursor support
line 5:   "   =  1: new highlights are coming (cancel prior fade)
line 6:   "   =  2: end of new highlights
line 7:   " {pos}     [lnum, column] of current match
line 8:   " {token}   in/out saves state between calls
line 9:   "
line 10:   " returns 1 if highlighting should be canceled
line 11: 
line 12:   if !g:matchup_matchparen_deferred || !exists('w:matchup_fade_timer')
line 13:     if a:level <= 0
line 14:       call s:matchparen.clear()
calling 1()

line 1:   if exists('w:matchup_match_id_list')
line 2:     for l:id in w:matchup_match_id_list
line 3:       silent! call matchdelete(l:id)
line 4:     endfor
line 5:     unlet! w:matchup_match_id_list
line 6:   endif
line 7:   if exists('s:ns_id')
line 8:     call nvim_buf_clear_namespace(0, s:ns_id, 0, -1)
line 9:   endif
line 10: 
line 11:   if !has('nvim') && exists('t:match_popup') && (exists('*win_gettype') ? win_gettype() !=# 'popup' : &buftype !=# 'terminal')
line 13:     call s:do_popup_autocmd_leave(t:match_popup)
line 14:     call popup_hide(t:match_popup)
line 15:   elseif has('nvim')
line 16:     call s:close_floating_win()
calling <SNR>67_close_floating_win()

line 1:   if !exists('s:float_id')
line 2:     return
<SNR>67_close_floating_win returning #0

continuing in 1

line 17:   endif
line 18: 
line 19:   if exists('w:matchup_oldstatus')
line 20:     let &l:statusline = w:matchup_oldstatus
line 21:     unlet w:matchup_oldstatus
line 22:     if exists('#User#MatchupOffscreenLeave')
line 23:       doautocmd <nomodeline> User MatchupOffscreenLeave
line 24:     endif
line 25:   endif
line 26:   if exists('w:matchup_statusline')
line 27:     unlet w:matchup_statusline
line 28:   endif
line 29: 
line 30:   let w:matchup_need_clear = 0
1 returning #0

continuing in 2

line 15:     endif
line 16:     return 0
2 returning #0

continuing in 4

line 35: 
line 36:   let l:modes = g:matchup_matchparen_nomode
line 37:   if get(g:, 'matchup_matchparen_novisual', 0)  " deprecated option name
line 38:     let l:modes .= "vV\<c-v>"
line 39:   endif
line 40:   if stridx(l:modes, l:real_mode) >= 0
line 41:     return
line 42:   endif
line 43: 
line 44:   " prevent problems in visual block mode at the end of a line
line 45:   if get(matchup#pos#get_cursor(), 4, 0) == 2147483647 && "v\<c-v>" =~? mode()
calling matchup#pos#get_cursor()

line 1:     return getcurpos()
matchup#pos#get_cursor returning [0, 26, 109, 0, 106]

continuing in 4

line 47:     return
line 48:   endif
line 49: 
line 50:   " don't get matches when inside a closed fold
line 51:   if foldclosed(line('.')) > -1
line 52:     return
line 53:   endif
line 54: 
line 55:   " give up when cursor is far into a very long line
line 56:   if &synmaxcol && col('.') > &synmaxcol
line 57:     return
line 58:   endif
line 59: 
line 60:   " in insert mode, cursor is treated as being one behind
line 61:   let l:insertmode = l:real_mode ==# 'i'
line 62: 
line 63:   " start the timeout period
line 64:   let l:timeout = l:insertmode ? get(b:, 'matchup_matchparen_insert_timeout',           g:matchup_matchparen_insert_timeout) : get(b:, 'matchup_matchparen_timeout',           g:matchup_matchparen_timeout)
line 69:   call matchup#perf#timeout_start(l:timeout)
calling matchup#perf#timeout_start(300)

line 1:   let s:timeout = a:timeout
line 2:   let s:timeout_enabled = (a:timeout == 0) ? 0 : 1
line 3:   let s:timeout_pulse_time = reltime()
matchup#perf#timeout_start returning #0

continuing in 4

line 70: 
line 71:   let l:current = matchup#delim#get_current('all', 'both_all', { 'insertmode': l:insertmode,   'stopline': g:matchup_matchparen_stopline,   'highlighting': 1, })
Searching for "autoload/matchup/delim.vim" in runtime path
Searching for "/home/rachartier/.config/nvim/autoload/matchup/delim.vim"
Searching for "/home/rachartier/.local/share/nvim/site/autoload/matchup/delim.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/lazy.nvim/autoload/matchup/delim.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/lazydev.nvim/autoload/matchup/delim.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/copilot-lualine/autoload/matchup/delim.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/lualine.nvim/autoload/matchup/delim.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/debugprint.nvim/autoload/matchup/delim.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/mini.hipatterns/autoload/matchup/delim.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/mini.align/autoload/matchup/delim.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/fwatch.nvim/autoload/matchup/delim.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/mini.icons/autoload/matchup/delim.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/copilot.lua/autoload/matchup/delim.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-nio/autoload/matchup/delim.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/dressing.nvim/autoload/matchup/delim.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/avante.nvim/autoload/matchup/delim.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/todo-comments.nvim/autoload/matchup/delim.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/git-conflict.nvim/autoload/matchup/delim.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/which-key.nvim/autoload/matchup/delim.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/tiny-inline-diagnostic.nvim/autoload/matchup/delim.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/tmux.nvim/autoload/matchup/delim.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/mini.surround/autoload/matchup/delim.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/gitsigns.nvim/autoload/matchup/delim.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/telescope-fzf-native.nvim/autoload/matchup/delim.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/plenary.nvim/autoload/matchup/delim.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/telescope.nvim/autoload/matchup/delim.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/tiny-buffers-switcher.nvim/autoload/matchup/delim.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/nvim-scissors/autoload/matchup/delim.vim"
Searching for "/home/rachartier/.local/share/nvim/lazy/vim-matchup/autoload/matchup/delim.vim"
line 71: sourcing "/home/rachartier/.local/share/nvim/lazy/vim-matchup/autoload/matchup/delim.vim"
line 1: " vim match-up - even better matching
line 2: "
line 3: " Maintainer: Andy Massimino
line 4: " Email:      a@normed.space
line 5: "
line 6: 
line 7: let s:save_cpo = &cpo
line 8: set cpo&vim
line 9: 
line 10: function! matchup#delim#get_next(type, side, ...) abort " {{{1
line 17: 
line 18: " }}}1
line 19: function! matchup#delim#get_prev(type, side, ...) abort " {{{1
line 26: 
line 27: " }}}1
line 28: function! matchup#delim#get_current(type, side, ...) abort " {{{1
line 35: 
line 36: " }}}1
line 37: function! matchup#delim#get_surrounding(type, count, opts) abort " {{{1
line 40: 
line 41: " }}}1
line 42: 
line 43: function! s:get_delim_multi(opts) abort " {{{1
line 62: 
line 63: " }}}1
line 64: 
line 65: function! matchup#delim#get_matching(delim, ...) abort " {{{1
line 149: 
line 150: " }}}1
line 151: 
line 152: function! matchup#delim#get_surrounding_impl(type, ...) abort " {{{1
line 255: 
line 256: let s:cache = {}
line 257: let s:cache_valid = {}
line 258: 
line 259: " }}}1
line 260: function! matchup#delim#get_surround_nearest(open, ...) abort " {{{1
line 283: 
line 284: " }}}1
line 285: 
line 286: function! matchup#delim#jump_target(delim) abort " {{{1
line 312: 
line 313: " }}}1
line 314: function! matchup#delim#end_offset(delim) abort " {{{1
line 317: 
line 318: " }}}1
line 319: function! matchup#delim#end_pos(delim) abort " {{{1
line 322: 
line 323: " }}}1
line 324: 
line 325: function! s:get_delim(opts) abort " {{{1
line 525: 
line 526: " }}}1
line 527: 
line 528: function! s:parser_delim_new(lnum, cnum, opts) " {{{1
line 680: " }}}1
line 681: 
line 682: function! s:get_matching_delims(down, stopline) dict abort " {{{1
line 867: " }}}1
line 868: 
line 869: function! matchup#delim#skip(...) " {{{1
line 884: 
line 885: function! matchup#delim#skip_default()
line 889: 
line 890: ""
line 891: " regular skip expression at cursor
line 892: function! matchup#delim#skip0()
line 896: 
line 897: ""
line 898: " advanced mid/syntax skip when found in midmap
line 899: " {val} is a 2 element array of allowed [syntax, words]
line 900: " {def} is the fallback skip expression
line 901: function! matchup#delim#skip1(val, def)
line 908: 
line 909: ""
line 910: " advanced mid/syntax skip when word is not in midmap
line 911: " {strike} pattern of disallowed mid words
line 912: " {def} is the fallback skip expression
line 913: function! matchup#delim#skip2(strike, def)
line 916: 
line 917: let s:invert_skip = 0
line 918: 
line 919: function! matchup#delim#set_invert_skip(val) abort
line 922: 
line 923: let s:eff_curpos = [1, 1]
line 924: 
line 925: " effective column/line
line 926: function! s:effline(expr)
line 929: 
line 930: function! s:effcol(expr)
line 933: 
line 934: function! s:geteffline(expr)
line 937: 
line 938: " }}}1
line 939: 
line 940: function! matchup#delim#fill_backrefs(re, groups, warn) abort " {{{1
line 945: 
line 946: function! s:get_backref(groups, bref, warn)
line 957: 
line 958: "}}}1
line 959: 
line 960: function! s:anchor_regex(re, cnum, method) " {{{1
line 971: 
line 972: " }}}1
line 973: function! s:process_hlend(re, cursorpos) " {{{1
line 980: 
line 981: " }}}1
line 982: 
line 983: " initialize script variables
line 984: let s:stopline = get(g:, 'matchup_delim_stopline', 1500)
line 985: 
line 986: let s:engines = { 'classic': {   'get_delim'     : function('s:get_delim'),   'get_matching'  : function('s:get_matching_delims'),   'parsers': {     'all'       : [ function('s:parser_delim_new'), ],     'delim_all' : [ function('s:parser_delim_new'), ],     'delim_tex' : [ function('s:parser_delim_new'), ],   }, }, 'tree_sitter': {   'get_delim'     : function('matchup#ts_engine#get_delim'),   'get_matching'  : function('matchup#ts_engine#get_matching'), },}
line 1001: 
line 1002: let &cpo = s:save_cpo
line 1003: 
line 1004: " vim: fdm=marker sw=2
finished sourcing /home/rachartier/.local/share/nvim/lazy/vim-matchup/autoload/matchup/delim.vim
continuing in 4
calling matchup#delim#get_current('all', 'both_all', {'highlighting': 1, 'insertmode': 0, 'stopline': 400})

line 1:   return s:get_delim_multi(extend({ 'direction' : 'current', 'type' : a:type, 'side' : a:side,}, get(a:, '1', {})))
calling <SNR>114_get_delim_multi({'side': 'both_all', 'direction': 'cur... 400, 'type': 'all', 'highlighting': 1})

line 1:   let l:best = {}
line 2:   for l:e in get(get(b:, 'matchup_active_engines', {}), a:opts.type, [])
line 3:     let l:res = call(s:engines[l:e].get_delim, [a:opts])
line 4:     if empty(l:res)
line 5:       continue
line 6:     endif
line 7:     if a:opts.direction ==# 'current'
line 8:       return l:res
line 9:     elseif a:opts.direction ==# 'next' && (empty(l:best) || matchup#pos#smaller(l:res, l:best))
line 11:       let l:best = l:res
line 12:     elseif a:opts.direction ==# 'prev' && (empty(l:best) || matchup#pos#larger(l:res, l:best))
line 14:       let l:best = l:res
line 15:     endif
line 16:   endfor
line 17:   return l:best
<SNR>114_get_delim_multi returning {}

continuing in matchup#delim#get_current

matchup#delim#get_current returning {}

continuing in 4

line 75:   call matchup#perf#toc('matchparen.highlight', 'get_current')
calling matchup#perf#toc('matchparen.highlight', 'get_current')

line 1:   let l:elapsed = s:Reltimefloat(reltime(s:time_start[a:context]))
line 2: 
line 3:   let l:key = a:context.'#'.a:state
line 4:   if has_key(g:matchup#perf#times, l:key)
line 5:     if l:elapsed > g:matchup#perf#times[l:key].maximum
line 6:       let g:matchup#perf#times[l:key].maximum = l:elapsed
line 7:     endif
line 8:     let g:matchup#perf#times[l:key].last = l:elapsed
line 9:     let g:matchup#perf#times[l:key].emavg = s:alpha*l:elapsed + (1-s:alpha)*g:matchup#perf#times[l:key].emavg
line 11:   else
line 12:     let g:matchup#perf#times[l:key] = { 'maximum' : l:elapsed, 'emavg'   : l:elapsed, 'last'    : l:elapsed,}
line 17:   endif
matchup#perf#toc returning #0

continuing in 4

line 76: 
line 77:   if get(b:, 'matchup_matchparen_deferred', g:matchup_matchparen_deferred)
line 78:     let l:hsa = get(b:, 'matchup_matchparen_hi_surround_always', g:matchup_matchparen_hi_surround_always)
line 80:     if l:hsa > 0 && empty(l:current) || l:hsa > 1
line 81:       call s:highlight_surrounding(l:insertmode, !empty(l:current))
line 82:     endif
line 83:   endif
line 84: 
line 85:   if empty(l:current)
line 86:     return
4 returning #0

continuing in 3

3 returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 227: ~/.local/share/nvim/lazy/avante.nvim/lua/avante/selection.lua:266>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand <Lua 306: ~/.local/share/nvim/lazy/LuaSnip/lua/luasnip/init.lua:607>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand <Lua 543: ~/.local/share/nvim/lazy/mini.indentscope/lua/mini/indentscope.lua:672>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand call s:matchparen.highlight_deferred()

Executing: call s:matchparen.highlight_deferred()
calling 3()

line 1:   if !get(b:, 'matchup_matchparen_deferred', g:matchup_matchparen_deferred)
line 3:     return s:matchparen.highlight()
calling 4()

line 1:   if !g:matchup_matchparen_enabled | return | endif
line 1:  return | endif
line 1:  endif
line 2: 
line 3:   if has('vim_starting') | return | endif
line 3:  return | endif
line 3:  endif
line 4: 
line 5:   if !g:matchup_matchparen_pumvisible && s:pumvisible() | return | endif
line 5:  return | endif
line 5:  endif
line 6: 
line 7:   " try to avoid interfering with some auto-complete plugins
line 8:   if has('*state') && state('a') !=# '' | return | endif
line 8:  return | endif
line 8:  endif
line 9: 
line 10:   if !get(b:, 'matchup_matchparen_enabled', 1) && get(b:, 'matchup_matchparen_fallback', 1) && s:pi_paren_sid()
line 12:     return call(s:pi_paren_fcn, [])
line 13:   endif
line 14: 
line 15:   if !get(b:, 'matchup_matchparen_enabled', 1) | return | endif
line 15:  return | endif
line 15:  endif
line 16: 
line 17:   let l:force_update    = a:0 >= 1 ? a:1 : 0
line 18:   let l:changing_insert = a:0 >= 2 ? a:2 : 0
line 19:   let l:real_mode = l:changing_insert ? v:insertmode : mode()
line 20: 
line 21:   if !l:force_update && exists('w:last_changedtick') && exists('w:last_cursor') && matchup#pos#equal(w:last_cursor, matchup#pos#get_cursor()) && w:last_changedtick == b:changedtick
calling matchup#pos#get_cursor()

line 1:     return getcurpos()
matchup#pos#get_cursor returning [0, 26, 109, 0, 106]

continuing in 4

calling matchup#pos#equal([0, 26, 109, 0, 106], [0, 26, 109, 0, 106])

line 1:   let l:pos1 = s:parse_args(a:p1)
calling <SNR>113_parse_args([0, 26, 109, 0, 106])

line 1:   "
line 2:   " The arguments should be in one of the following forms (when unpacked):
line 3:   "
line 4:   "   [lnum, cnum]
line 5:   "   [bufnum, lnum, cnum, ...]
line 6:   "   {'lnum' : lnum, 'cnum' : cnum}
line 7:   "
line 8: 
line 9:   if len(a:args) > 1
line 10:     return s:parse_args([a:args])
calling <SNR>113_parse_args([[0, 26, 109, 0, 106]])

line 1:   "
line 2:   " The arguments should be in one of the following forms (when unpacked):
line 3:   "
line 4:   "   [lnum, cnum]
line 5:   "   [bufnum, lnum, cnum, ...]
line 6:   "   {'lnum' : lnum, 'cnum' : cnum}
line 7:   "
line 8: 
line 9:   if len(a:args) > 1
line 10:     return s:parse_args([a:args])
line 11:   elseif len(a:args) == 1
line 12:     if type(a:args[0]) == type({})
line 13:       return [get(a:args[0], 'lnum'), get(a:args[0], 'cnum')]
line 14:     else
line 15:       if len(a:args[0]) == 2
line 16:         return a:args[0]
line 17:       else
line 18:         return a:args[0][1:]
<SNR>113_parse_args returning [26, 109, 0, 106]

continuing in <SNR>113_parse_args

<SNR>113_parse_args returning [26, 109, 0, 106]

continuing in matchup#pos#equal

line 2:   let l:pos2 = s:parse_args(a:p2)
calling <SNR>113_parse_args([0, 26, 109, 0, 106])

line 1:   "
line 2:   " The arguments should be in one of the following forms (when unpacked):
line 3:   "
line 4:   "   [lnum, cnum]
line 5:   "   [bufnum, lnum, cnum, ...]
line 6:   "   {'lnum' : lnum, 'cnum' : cnum}
line 7:   "
line 8: 
line 9:   if len(a:args) > 1
line 10:     return s:parse_args([a:args])
calling <SNR>113_parse_args([[0, 26, 109, 0, 106]])

line 1:   "
line 2:   " The arguments should be in one of the following forms (when unpacked):
line 3:   "
line 4:   "   [lnum, cnum]
line 5:   "   [bufnum, lnum, cnum, ...]
line 6:   "   {'lnum' : lnum, 'cnum' : cnum}
line 7:   "
line 8: 
line 9:   if len(a:args) > 1
line 10:     return s:parse_args([a:args])
line 11:   elseif len(a:args) == 1
line 12:     if type(a:args[0]) == type({})
line 13:       return [get(a:args[0], 'lnum'), get(a:args[0], 'cnum')]
line 14:     else
line 15:       if len(a:args[0]) == 2
line 16:         return a:args[0]
line 17:       else
line 18:         return a:args[0][1:]
<SNR>113_parse_args returning [26, 109, 0, 106]

continuing in <SNR>113_parse_args

<SNR>113_parse_args returning [26, 109, 0, 106]

continuing in matchup#pos#equal

line 3:   return l:pos1[:1] == l:pos2[:1]
matchup#pos#equal returning #1

continuing in 4

line 25:     return
4 returning #0

continuing in 3

3 returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorHold Autocommands for "*"
autocommand <Lua 386: ~/.config/nvim/lua/utils.lua:169>

Executing: checktime
Executing: 

Executing: qa
Executing QuitPre Autocommands for "*"
autocommand <Lua 407: ~/.local/share/nvim/lazy/mini.cursorword/lua/mini/cursorword.lua:223>

Executing: 
Executing BufUnload Autocommands for "<buffer=1>"
autocommand <Lua 317: ~/.local/share/nvim/lazy/alpha-nvim/lua/alpha.lua:664>

Executing: 
Executing BufUnload Autocommands for "*"
autocommand <Lua 582: ~/.local/share/nvim/lazy/copilot.lua/lua/copilot/suggestion.lua:592>

Executing: 
Executing VimLeavePre Autocommands for "*"
autocommand <Lua 342: /tmp/.mount_nvimAfSSiL/usr/share/nvim/runtime/lua/vim/lsp.lua:805>

Executing: 
Executing VimLeavePre Autocommands for "*"
autocommand <Lua 467: ~/.local/share/nvim/lazy/noice.nvim/lua/noice/init.lua:58>

Executing: 
Executing VimLeavePre Autocommands for "*"
autocommand <Lua 484: ~/.local/share/nvim/lazy/git-conflict.nvim/lua/git-conflict.lua:634>

Executing: 
Executing VimLeavePre Autocommands for "*"
autocommand <Lua 232: ~/.local/share/nvim/lazy/copilot.lua/lua/copilot/suggestion.lua:597>

Executing: 
Writing ShaDa file "/home/rachartier/.local/state/nvim/shada/main.shada"